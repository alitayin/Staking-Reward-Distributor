"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyFullySignedSignatures = exports.constructPsbt = exports.signAllPsbtInputs = exports.signPsbtInput = exports.getSigners = exports.toUnspent = exports.outputScriptTypes = exports.inputScriptTypes = void 0;
const assert = require("assert");
const outputScripts_1 = require("../bitgo/outputScripts");
const bitgo_1 = require("../bitgo");
const mock_1 = require("./mock");
const address_1 = require("../address");
/**
 * array of supported input script types.
 * use p2trMusig2 for p2trMusig2 script path.
 * use taprootKeyPathSpend for p2trMusig2 key path.
 */
exports.inputScriptTypes = [...outputScripts_1.scriptTypes2Of3, 'taprootKeyPathSpend', outputScripts_1.scriptTypeP2shP2pk];
/**
 * array of supported output script types.
 */
exports.outputScriptTypes = outputScripts_1.scriptTypes2Of3;
/**
 * create unspent object from input script type, index, network and root wallet key.
 */
function toUnspent(input, index, network, rootWalletKeys) {
    if (input.scriptType === 'p2shP2pk') {
        return mock_1.mockReplayProtectionUnspent(network, input.value, { key: rootWalletKeys['user'], vout: index });
    }
    else {
        const chain = bitgo_1.getInternalChainCode(input.scriptType === 'taprootKeyPathSpend' ? 'p2trMusig2' : input.scriptType);
        return mock_1.mockWalletUnspent(network, input.value, {
            chain,
            vout: index,
            keys: rootWalletKeys,
            index,
        });
    }
}
exports.toUnspent = toUnspent;
/**
 * returns signer and cosigner names for InputScriptType.
 * user and undefined as signer and cosigner respectively for p2shP2pk.
 * user and backup as signer and cosigner respectively for p2trMusig2.
 * user and bitgo as signer and cosigner respectively for other input script types.
 */
function getSigners(inputType) {
    return {
        signerName: 'user',
        cosignerName: inputType === 'p2shP2pk' ? undefined : inputType === 'p2trMusig2' ? 'backup' : 'bitgo',
    };
}
exports.getSigners = getSigners;
/**
 * signs with first or second signature for single input.
 * p2shP2pk is signed only with first sign.
 */
function signPsbtInput(psbt, input, inputIndex, rootWalletKeys, sign, params) {
    const { signers, deterministic } = params !== null && params !== void 0 ? params : {};
    const { signerName, cosignerName } = signers ? signers : getSigners(input.scriptType);
    if (sign === 'halfsigned') {
        if (input.scriptType === 'p2shP2pk') {
            psbt.signInput(inputIndex, rootWalletKeys[signerName]);
        }
        else {
            psbt.signInputHD(inputIndex, rootWalletKeys[signerName]);
        }
    }
    if (sign === 'fullsigned' && cosignerName && input.scriptType !== 'p2shP2pk') {
        psbt.signInputHD(inputIndex, rootWalletKeys[cosignerName], { deterministic });
    }
}
exports.signPsbtInput = signPsbtInput;
/**
 * signs with first or second signature for all inputs.
 * p2shP2pk is signed only with first sign.
 */
function signAllPsbtInputs(psbt, inputs, rootWalletKeys, sign, params) {
    const { signers, deterministic } = params !== null && params !== void 0 ? params : {};
    inputs.forEach((input, inputIndex) => {
        signPsbtInput(psbt, input, inputIndex, rootWalletKeys, sign, { signers, deterministic });
    });
}
exports.signAllPsbtInputs = signAllPsbtInputs;
/**
 * construct psbt for given inputs, outputs, network and root wallet keys.
 */
function constructPsbt(inputs, outputs, network, rootWalletKeys, sign, params) {
    const { signers, deterministic } = params !== null && params !== void 0 ? params : {};
    const totalInputAmount = inputs.reduce((sum, input) => sum + input.value, BigInt(0));
    const outputInputAmount = outputs.reduce((sum, output) => sum + output.value, BigInt(0));
    assert(totalInputAmount >= outputInputAmount, 'total output can not exceed total input');
    assert(!outputs.some((o) => (o.scriptType && o.address) || (!o.scriptType && !o.address)), 'only either output script type or address should be provided');
    const psbt = bitgo_1.createPsbtForNetwork({ network });
    const unspents = inputs.map((input, i) => toUnspent(input, i, network, rootWalletKeys));
    unspents.forEach((u, i) => {
        const { signerName, cosignerName } = signers ? signers : getSigners(inputs[i].scriptType);
        if (bitgo_1.isWalletUnspent(u) && cosignerName) {
            bitgo_1.addWalletUnspentToPsbt(psbt, u, rootWalletKeys, signerName, cosignerName);
        }
        else {
            const { redeemScript } = outputScripts_1.createOutputScriptP2shP2pk(rootWalletKeys[signerName].publicKey);
            assert(redeemScript);
            bitgo_1.addReplayProtectionUnspentToPsbt(psbt, u, redeemScript);
        }
    });
    outputs.forEach((output, i) => {
        if (output.scriptType) {
            bitgo_1.addWalletOutputToPsbt(psbt, rootWalletKeys, output.isInternalAddress ? bitgo_1.getInternalChainCode(output.scriptType) : bitgo_1.getExternalChainCode(output.scriptType), i, output.value);
        }
        else if (output.address) {
            const { address, value } = output;
            psbt.addOutput({ script: address_1.toOutputScript(address, network), value });
        }
    });
    if (sign === 'unsigned') {
        return psbt;
    }
    psbt.setAllInputsMusig2NonceHD(rootWalletKeys['user']);
    psbt.setAllInputsMusig2NonceHD(rootWalletKeys['bitgo'], { deterministic });
    signAllPsbtInputs(psbt, inputs, rootWalletKeys, 'halfsigned', { signers });
    if (sign === 'fullsigned') {
        signAllPsbtInputs(psbt, inputs, rootWalletKeys, sign, { signers, deterministic });
    }
    return psbt;
}
exports.constructPsbt = constructPsbt;
/**
 * Verifies signatures of fully signed tx (with taproot key path support).
 * NOTE: taproot key path tx can only be built and signed with PSBT.
 */
function verifyFullySignedSignatures(tx, unspents, walletKeys, signer, cosigner) {
    const prevOutputs = unspents.map((u) => bitgo_1.toOutput(u, tx.network));
    return unspents.every((u, index) => {
        if (bitgo_1.parseSignatureScript2Of3(tx.ins[index]).scriptType === 'taprootKeyPathSpend') {
            const result = bitgo_1.getSignatureVerifications(tx, index, u.value, undefined, prevOutputs);
            return result.length === 1 && result[0].signature;
        }
        else {
            const result = bitgo_1.verifySignatureWithUnspent(tx, index, unspents, walletKeys);
            if ((signer === 'user' && cosigner === 'bitgo') || (signer === 'bitgo' && cosigner === 'user')) {
                return result[0] && !result[1] && result[2];
            }
            else if ((signer === 'user' && cosigner === 'backup') || (signer === 'backup' && cosigner === 'user')) {
                return result[0] && result[1] && !result[2];
            }
            else {
                return !result[0] && result[1] && result[2];
            }
        }
    });
}
exports.verifyFullySignedSignatures = verifyFullySignedSignatures;
//# sourceMappingURL=data:application/json;base64,