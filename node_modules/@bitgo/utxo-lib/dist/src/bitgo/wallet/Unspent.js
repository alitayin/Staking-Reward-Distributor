"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addWalletUnspentToPsbt = exports.updateWalletUnspentForPsbt = exports.addReplayProtectionUnspentToPsbt = exports.updateReplayProtectionUnspentToPsbt = exports.psbtIncludesUnspentAtIndex = exports.verifySignatureWithUnspent = exports.signInputWithUnspent = exports.isWalletUnspent = void 0;
const __1 = require("../..");
const outputScripts_1 = require("../outputScripts");
const address_1 = require("../../address");
const signature_1 = require("../signature");
const Unspent_1 = require("../Unspent");
const chains_1 = require("./chains");
const Musig2_1 = require("../Musig2");
const transaction_1 = require("../transaction");
const parseInput_1 = require("../parseInput");
const utils_1 = require("bip174/src/lib/utils");
const PsbtUtil_1 = require("../PsbtUtil");
function isWalletUnspent(u) {
    return u.chain !== undefined;
}
exports.isWalletUnspent = isWalletUnspent;
function signInputWithUnspent(txBuilder, inputIndex, unspent, unspentSigner) {
    const { walletKeys, signer, cosigner } = unspentSigner.deriveForChainAndIndex(unspent.chain, unspent.index);
    const scriptType = outputScripts_1.scriptTypeForChain(unspent.chain);
    const pubScript = outputScripts_1.createOutputScript2of3(walletKeys.publicKeys, scriptType).scriptPubKey;
    const pubScriptExpected = address_1.toOutputScript(unspent.address, txBuilder.network);
    if (!pubScript.equals(pubScriptExpected)) {
        throw new Error(`pubscript mismatch: expected ${pubScriptExpected.toString('hex')} got ${pubScript.toString('hex')}`);
    }
    signature_1.signInput2Of3(txBuilder, inputIndex, scriptType, walletKeys.publicKeys, signer, cosigner.publicKey, unspent.value);
}
exports.signInputWithUnspent = signInputWithUnspent;
/**
 * @param tx
 * @param inputIndex
 * @param unspents
 * @param walletKeys
 * @return triple of booleans indicating a valid signature for each pubkey
 */
function verifySignatureWithUnspent(tx, inputIndex, unspents, walletKeys) {
    var _a, _b;
    if (tx.ins.length !== unspents.length) {
        throw new Error(`input length must match unspents length`);
    }
    const input = tx.ins[inputIndex];
    /* istanbul ignore next */
    if (!input) {
        throw new Error(`no input at index ${inputIndex}`);
    }
    const unspent = unspents[inputIndex];
    if (!isWalletUnspent(unspent) || (!((_a = input.script) === null || _a === void 0 ? void 0 : _a.length) && !((_b = input.witness) === null || _b === void 0 ? void 0 : _b.length))) {
        return [false, false, false];
    }
    const parsedInput = parseInput_1.parseSignatureScript(input);
    const prevOutputs = unspents.map((u) => Unspent_1.toOutput(u, tx.network));
    // If it is a taproot keyPathSpend input, the only valid signature combinations is user-bitgo. We can
    // only verify that the aggregated signature is valid, not that the individual partial-signature is valid.
    // Therefore, we can only say that either all partial signatures are valid, or none are.
    if (parsedInput.scriptType === 'taprootKeyPathSpend') {
        const result = signature_1.getSignatureVerifications(tx, inputIndex, unspent.value, undefined, prevOutputs);
        return result.length === 1 && result[0].signature ? [true, false, true] : [false, false, false];
    }
    return signature_1.verifySignatureWithPublicKeys(tx, inputIndex, prevOutputs, walletKeys.deriveForChainAndIndex(unspent.chain, unspent.index).publicKeys);
}
exports.verifySignatureWithUnspent = verifySignatureWithUnspent;
/**
 * @param psbt
 * @param inputIndex
 * @param id Unspent ID
 * @returns true iff the unspent ID on the unspent and psbt input match
 */
function psbtIncludesUnspentAtIndex(psbt, inputIndex, id) {
    utils_1.checkForInput(psbt.data.inputs, inputIndex);
    const { txid, vout } = Unspent_1.parseOutputId(id);
    const psbtOutPoint = Unspent_1.getOutputIdForInput(psbt.txInputs[inputIndex]);
    return psbtOutPoint.txid === txid && psbtOutPoint.vout === vout;
}
exports.psbtIncludesUnspentAtIndex = psbtIncludesUnspentAtIndex;
/**
 * Update the psbt input at the given index
 * @param psbt
 * @param inputIndex
 * @param u
 * @param redeemScript Only overrides if there is no redeemScript in the input currently
 */
function updateReplayProtectionUnspentToPsbt(psbt, inputIndex, u, redeemScript) {
    if (!psbtIncludesUnspentAtIndex(psbt, inputIndex, u.id)) {
        throw new Error(`unspent does not correspond to psbt input`);
    }
    const input = utils_1.checkForInput(psbt.data.inputs, inputIndex);
    if (redeemScript && !input.redeemScript) {
        psbt.updateInput(inputIndex, { redeemScript });
    }
    // Because Zcash directly hashes the value for non-segwit transactions, we do not need to check indirectly
    // with the previous transaction. Therefore, we can treat Zcash non-segwit transactions as Bitcoin
    // segwit transactions
    const isZcash = __1.getMainnet(psbt.network) === __1.networks.zcash;
    if (!Unspent_1.isUnspentWithPrevTx(u) && !isZcash) {
        throw new Error('Error, require previous tx to add to PSBT');
    }
    if (isZcash && !input.witnessUtxo) {
        const { script, value } = Unspent_1.toPrevOutput(u, psbt.network);
        psbt.updateInput(inputIndex, { witnessUtxo: { script, value } });
    }
    else if (!isZcash && !input.nonWitnessUtxo) {
        psbt.updateInput(inputIndex, { nonWitnessUtxo: u.prevTx });
    }
}
exports.updateReplayProtectionUnspentToPsbt = updateReplayProtectionUnspentToPsbt;
function addUnspentToPsbt(psbt, id) {
    const { txid, vout } = Unspent_1.parseOutputId(id);
    psbt.addInput({
        hash: txid,
        index: vout,
    });
}
function addReplayProtectionUnspentToPsbt(psbt, u, redeemScript, 
/**
 * @deprecated
 */
network = psbt.network) {
    if (psbt.network !== network) {
        throw new Error('psbt network does not match network');
    }
    addUnspentToPsbt(psbt, u.id);
    updateReplayProtectionUnspentToPsbt(psbt, psbt.inputCount - 1, u, redeemScript);
}
exports.addReplayProtectionUnspentToPsbt = addReplayProtectionUnspentToPsbt;
/**
 * Update the PSBT with the unspent data for the input at the given index if the data is not there already.
 *
 * @param psbt
 * @param inputIndex
 * @param u
 * @param rootWalletKeys
 * @param signer
 * @param cosigner
 */
function updateWalletUnspentForPsbt(psbt, inputIndex, u, rootWalletKeys, signer, cosigner) {
    if (!psbtIncludesUnspentAtIndex(psbt, inputIndex, u.id)) {
        throw new Error(`unspent does not correspond to psbt input`);
    }
    const input = utils_1.checkForInput(psbt.data.inputs, inputIndex);
    // Because Zcash directly hashes the value for non-segwit transactions, we do not need to check indirectly
    // with the previous transaction. Therefore, we can treat Zcash non-segwit transactions as Bitcoin
    // segwit transactions
    const isZcashOrSegwit = chains_1.isSegwit(u.chain) || __1.getMainnet(psbt.network) === __1.networks.zcash;
    if (isZcashOrSegwit && !input.witnessUtxo) {
        const { script, value } = Unspent_1.toPrevOutput(u, psbt.network);
        psbt.updateInput(inputIndex, { witnessUtxo: { script, value } });
    }
    else if (!isZcashOrSegwit) {
        if (!Unspent_1.isUnspentWithPrevTx(u)) {
            throw new Error('Error, require previous tx to add to PSBT');
        }
        if (!input.witnessUtxo && !input.nonWitnessUtxo) {
            // Force the litecoin transaction to have no MWEB advanced transaction flag
            if (__1.getMainnet(psbt.network) === __1.networks.litecoin) {
                u.prevTx = transaction_1.createTransactionFromBuffer(u.prevTx, psbt.network, { amountType: 'bigint' }).toBuffer();
            }
            psbt.updateInput(inputIndex, { nonWitnessUtxo: u.prevTx });
        }
    }
    const walletKeys = rootWalletKeys.deriveForChainAndIndex(u.chain, u.index);
    const scriptType = outputScripts_1.scriptTypeForChain(u.chain);
    const sighashType = signature_1.getDefaultSigHash(psbt.network, scriptType);
    if (psbt.data.inputs[inputIndex].sighashType === undefined) {
        psbt.updateInput(inputIndex, { sighashType });
    }
    const isBackupFlow = signer === 'backup' || cosigner === 'backup';
    if (scriptType === 'p2tr' || (scriptType === 'p2trMusig2' && isBackupFlow)) {
        if (input.tapLeafScript && input.tapBip32Derivation) {
            return;
        }
        const createSpendScriptP2trFn = scriptType === 'p2tr' ? outputScripts_1.createSpendScriptP2tr : outputScripts_1.createSpendScriptP2trMusig2;
        const { controlBlock, witnessScript, leafVersion, leafHash } = createSpendScriptP2trFn(walletKeys.publicKeys, [
            walletKeys[signer].publicKey,
            walletKeys[cosigner].publicKey,
        ]);
        if (!input.tapLeafScript) {
            psbt.updateInput(inputIndex, {
                tapLeafScript: [{ controlBlock, script: witnessScript, leafVersion }],
            });
        }
        if (!input.tapBip32Derivation) {
            psbt.updateInput(inputIndex, {
                tapBip32Derivation: [signer, cosigner].map((key) => ({
                    leafHashes: [leafHash],
                    pubkey: outputScripts_1.toXOnlyPublicKey(walletKeys[key].publicKey),
                    path: rootWalletKeys.getDerivationPath(rootWalletKeys[key], u.chain, u.index),
                    masterFingerprint: rootWalletKeys[key].fingerprint,
                })),
            });
        }
    }
    else if (scriptType === 'p2trMusig2') {
        const { internalPubkey: tapInternalKey, outputPubkey: tapOutputKey, taptreeRoot, } = outputScripts_1.createKeyPathP2trMusig2(walletKeys.publicKeys);
        if (psbt.getProprietaryKeyVals(inputIndex, {
            identifier: PsbtUtil_1.PSBT_PROPRIETARY_IDENTIFIER,
            subtype: PsbtUtil_1.ProprietaryKeySubtype.MUSIG2_PARTICIPANT_PUB_KEYS,
        }).length === 0) {
            const participantsKeyValData = Musig2_1.encodePsbtMusig2Participants({
                tapOutputKey,
                tapInternalKey,
                participantPubKeys: [walletKeys.user.publicKey, walletKeys.bitgo.publicKey],
            });
            psbt.addProprietaryKeyValToInput(inputIndex, participantsKeyValData);
        }
        if (!input.tapInternalKey) {
            psbt.updateInput(inputIndex, {
                tapInternalKey: tapInternalKey,
            });
        }
        if (!input.tapMerkleRoot) {
            psbt.updateInput(inputIndex, {
                tapMerkleRoot: taptreeRoot,
            });
        }
        if (!input.tapBip32Derivation) {
            psbt.updateInput(inputIndex, {
                tapBip32Derivation: [signer, cosigner].map((key) => ({
                    leafHashes: [],
                    pubkey: outputScripts_1.toXOnlyPublicKey(walletKeys[key].publicKey),
                    path: rootWalletKeys.getDerivationPath(rootWalletKeys[key], u.chain, u.index),
                    masterFingerprint: rootWalletKeys[key].fingerprint,
                })),
            });
        }
    }
    else {
        if (!input.bip32Derivation) {
            psbt.updateInput(inputIndex, {
                bip32Derivation: [0, 1, 2].map((idx) => ({
                    pubkey: walletKeys.triple[idx].publicKey,
                    path: walletKeys.paths[idx],
                    masterFingerprint: rootWalletKeys.triple[idx].fingerprint,
                })),
            });
        }
        const { witnessScript, redeemScript } = outputScripts_1.createOutputScript2of3(walletKeys.publicKeys, scriptType);
        if (witnessScript && !input.witnessScript) {
            psbt.updateInput(inputIndex, { witnessScript });
        }
        if (redeemScript && !input.redeemScript) {
            psbt.updateInput(inputIndex, { redeemScript });
        }
    }
}
exports.updateWalletUnspentForPsbt = updateWalletUnspentForPsbt;
function addWalletUnspentToPsbt(psbt, u, rootWalletKeys, signer, cosigner, 
/**
 * @deprecated
 */
network = psbt.network) {
    if (psbt.network !== network) {
        throw new Error('psbt network does not match network');
    }
    addUnspentToPsbt(psbt, u.id);
    updateWalletUnspentForPsbt(psbt, psbt.inputCount - 1, u, rootWalletKeys, signer, cosigner);
}
exports.addWalletUnspentToPsbt = addWalletUnspentToPsbt;
//# sourceMappingURL=data:application/json;base64,