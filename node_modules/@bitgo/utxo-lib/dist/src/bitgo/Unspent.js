"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.unspentSum = exports.addToTransactionBuilder = exports.toPrevOutputWithPrevTx = exports.toPrevOutput = exports.getOutputIdForInput = exports.formatOutputId = exports.parseOutputId = exports.fromOutputWithPrevTx = exports.fromOutput = exports.toOutput = exports.isUnspentWithPrevTx = void 0;
const address_1 = require("../address");
function isUnspentWithPrevTx(u) {
    return Buffer.isBuffer(u.prevTx);
}
exports.isUnspentWithPrevTx = isUnspentWithPrevTx;
/**
 * @return TxOutput from Unspent
 */
function toOutput(u, network) {
    return {
        script: address_1.toOutputScript(u.address, network),
        value: u.value,
    };
}
exports.toOutput = toOutput;
/**
 * @return Unspent from TxOutput
 */
function fromOutput(tx, vout) {
    const o = tx.outs[vout];
    if (!o) {
        throw new Error(`invalid vout`);
    }
    return {
        id: formatOutputId({ txid: tx.getId(), vout }),
        address: address_1.fromOutputScript(o.script, tx.network),
        value: o.value,
    };
}
exports.fromOutput = fromOutput;
function fromOutputWithPrevTx(tx, vout) {
    return {
        ...fromOutput(tx, vout),
        prevTx: tx.toBuffer(),
    };
}
exports.fromOutputWithPrevTx = fromOutputWithPrevTx;
/**
 * @param outputId
 * @return TxOutPoint
 */
function parseOutputId(outputId) {
    const parts = outputId.split(':');
    if (parts.length !== 2) {
        throw new Error(`invalid outputId, must have format txid:vout`);
    }
    const [txid, voutStr] = parts;
    const vout = Number(voutStr);
    if (txid.length !== 64) {
        throw new Error(`invalid txid ${txid} ${txid.length}`);
    }
    if (Number.isNaN(vout) || vout < 0 || !Number.isSafeInteger(vout)) {
        throw new Error(`invalid vout: must be integer >= 0`);
    }
    return { txid, vout };
}
exports.parseOutputId = parseOutputId;
/**
 * @param txid
 * @param vout
 * @return outputId
 */
function formatOutputId({ txid, vout }) {
    return `${txid}:${vout}`;
}
exports.formatOutputId = formatOutputId;
function getOutputIdForInput(i) {
    return {
        txid: Buffer.from(i.hash).reverse().toString('hex'),
        vout: i.index,
    };
}
exports.getOutputIdForInput = getOutputIdForInput;
/**
 * @return PrevOutput from Unspent
 */
function toPrevOutput(u, network) {
    return {
        ...parseOutputId(u.id),
        ...toOutput(u, network),
    };
}
exports.toPrevOutput = toPrevOutput;
/**
 * @return PrevOutput with prevTx from Unspent
 */
function toPrevOutputWithPrevTx(u, network) {
    let prevTx;
    if (typeof u.prevTx === 'string') {
        prevTx = Buffer.from(u.prevTx, 'hex');
    }
    else if (Buffer.isBuffer(u.prevTx)) {
        prevTx = u.prevTx;
    }
    else if (u.prevTx !== undefined) {
        throw new Error(`Invalid prevTx type for unspent ${u.prevTx}`);
    }
    return {
        ...parseOutputId(u.id),
        ...toOutput(u, network),
        prevTx,
    };
}
exports.toPrevOutputWithPrevTx = toPrevOutputWithPrevTx;
/**
 * @param txb
 * @param u
 * @param sequence - sequenceId
 */
function addToTransactionBuilder(txb, u, sequence) {
    const { txid, vout, script, value } = toPrevOutput(u, txb.network);
    txb.addInput(txid, vout, sequence, script, value);
}
exports.addToTransactionBuilder = addToTransactionBuilder;
/**
 * Sum the values of the unspents.
 * Throws error if sum is not a safe integer value, or if unspent amount types do not match `amountType`
 * @param unspents - array of unspents to sum
 * @param amountType - expected value type of unspents
 * @return unspentSum - type matches amountType
 */
function unspentSum(unspents, amountType = 'number') {
    if (amountType === 'bigint') {
        return unspents.reduce((sum, u) => sum + u.value, BigInt(0));
    }
    else {
        const sum = unspents.reduce((sum, u) => sum + u.value, Number(0));
        if (!Number.isSafeInteger(sum)) {
            throw new Error('unspent sum is not a safe integer number, consider using bigint');
        }
        return sum;
    }
}
exports.unspentSum = unspentSum;
//# sourceMappingURL=data:application/json;base64,