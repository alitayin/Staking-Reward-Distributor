"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withUnsafeNonSegwit = exports.isPsbt = exports.isPsbtInputFinalized = exports.getPsbtInputSignatureCount = exports.getPsbtInputProprietaryKeyVals = exports.ProprietaryKeySubtype = exports.PSBT_PROPRIETARY_IDENTIFIER = void 0;
const proprietaryKeyVal_1 = require("bip174/src/lib/proprietaryKeyVal");
/**
 * bitgo proprietary key identifier
 */
exports.PSBT_PROPRIETARY_IDENTIFIER = 'BITGO';
/**
 * subtype for proprietary keys that bitgo uses
 */
var ProprietaryKeySubtype;
(function (ProprietaryKeySubtype) {
    ProprietaryKeySubtype[ProprietaryKeySubtype["ZEC_CONSENSUS_BRANCH_ID"] = 0] = "ZEC_CONSENSUS_BRANCH_ID";
    ProprietaryKeySubtype[ProprietaryKeySubtype["MUSIG2_PARTICIPANT_PUB_KEYS"] = 1] = "MUSIG2_PARTICIPANT_PUB_KEYS";
    ProprietaryKeySubtype[ProprietaryKeySubtype["MUSIG2_PUB_NONCE"] = 2] = "MUSIG2_PUB_NONCE";
    ProprietaryKeySubtype[ProprietaryKeySubtype["MUSIG2_PARTIAL_SIG"] = 3] = "MUSIG2_PARTIAL_SIG";
})(ProprietaryKeySubtype = exports.ProprietaryKeySubtype || (exports.ProprietaryKeySubtype = {}));
/**
 * Search any data from psbt proprietary key value against keydata.
 * Default identifierEncoding is utf-8 for identifier.
 */
function getPsbtInputProprietaryKeyVals(input, keySearch) {
    var _a;
    if (!((_a = input.unknownKeyVals) === null || _a === void 0 ? void 0 : _a.length)) {
        return [];
    }
    if (keySearch && keySearch.subtype === undefined && Buffer.isBuffer(keySearch.keydata)) {
        throw new Error('invalid proprietary key search filter combination. subtype is required');
    }
    const keyVals = input.unknownKeyVals.map(({ key, value }, i) => {
        return { key: proprietaryKeyVal_1.decodeProprietaryKey(key), value };
    });
    return keyVals.filter((keyVal) => {
        return (keySearch === undefined ||
            (keySearch.identifier === keyVal.key.identifier &&
                (keySearch.subtype === undefined ||
                    (keySearch.subtype === keyVal.key.subtype &&
                        (!Buffer.isBuffer(keySearch.keydata) || keySearch.keydata.equals(keyVal.key.keydata))))));
    });
}
exports.getPsbtInputProprietaryKeyVals = getPsbtInputProprietaryKeyVals;
/**
 * @return partialSig/tapScriptSig/MUSIG2_PARTIAL_SIG count iff input is not finalized
 */
function getPsbtInputSignatureCount(input) {
    if (isPsbtInputFinalized(input)) {
        throw new Error('Input is already finalized');
    }
    return Math.max(Array.isArray(input.partialSig) ? input.partialSig.length : 0, Array.isArray(input.tapScriptSig) ? input.tapScriptSig.length : 0, getPsbtInputProprietaryKeyVals(input, {
        identifier: exports.PSBT_PROPRIETARY_IDENTIFIER,
        subtype: ProprietaryKeySubtype.MUSIG2_PARTIAL_SIG,
    }).length);
}
exports.getPsbtInputSignatureCount = getPsbtInputSignatureCount;
/**
 * @return true iff PSBT input is finalized
 */
function isPsbtInputFinalized(input) {
    return Buffer.isBuffer(input.finalScriptSig) || Buffer.isBuffer(input.finalScriptWitness);
}
exports.isPsbtInputFinalized = isPsbtInputFinalized;
/**
 * @return true iff data starts with magic PSBT byte sequence
 * @param data byte array or hex string
 * */
function isPsbt(data) {
    // https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki#specification
    // 0x70736274 - ASCII for 'psbt'. 0xff - separator
    if (typeof data === 'string') {
        if (data.length < 10) {
            return false;
        }
        data = Buffer.from(data.slice(0, 10), 'hex');
    }
    return 5 <= data.length && data.readUInt32BE(0) === 0x70736274 && data.readUInt8(4) === 0xff;
}
exports.isPsbt = isPsbt;
/**
 * This function allows signing or validating a psbt with non-segwit inputs those do not contain nonWitnessUtxo.
 */
function withUnsafeNonSegwit(psbt, fn, unsafe = true) {
    psbt.__CACHE.__UNSAFE_SIGN_NONSEGWIT = unsafe;
    try {
        return fn();
    }
    finally {
        psbt.__CACHE.__UNSAFE_SIGN_NONSEGWIT = false;
    }
}
exports.withUnsafeNonSegwit = withUnsafeNonSegwit;
//# sourceMappingURL=data:application/json;base64,