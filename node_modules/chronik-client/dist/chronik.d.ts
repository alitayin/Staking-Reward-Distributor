import * as _m0 from 'protobufjs/minimal';
export declare const protobufPackage = "chronik";
export declare enum SlpTokenType {
    FUNGIBLE = 0,
    NFT1_GROUP = 1,
    NFT1_CHILD = 2,
    UNKNOWN_TOKEN_TYPE = 3,
    UNRECOGNIZED = -1
}
export declare function slpTokenTypeFromJSON(object: any): SlpTokenType;
export declare function slpTokenTypeToJSON(object: SlpTokenType): string;
export declare enum SlpTxType {
    GENESIS = 0,
    SEND = 1,
    MINT = 2,
    BURN = 4,
    UNKNOWN_TX_TYPE = 3,
    UNRECOGNIZED = -1
}
export declare function slpTxTypeFromJSON(object: any): SlpTxType;
export declare function slpTxTypeToJSON(object: SlpTxType): string;
export declare enum Network {
    BCH = 0,
    XEC = 1,
    XPI = 2,
    XRG = 3,
    UNRECOGNIZED = -1
}
export declare function networkFromJSON(object: any): Network;
export declare function networkToJSON(object: Network): string;
export declare enum UtxoStateVariant {
    UNSPENT = 0,
    SPENT = 1,
    NO_SUCH_TX = 2,
    NO_SUCH_OUTPUT = 3,
    UNRECOGNIZED = -1
}
export declare function utxoStateVariantFromJSON(object: any): UtxoStateVariant;
export declare function utxoStateVariantToJSON(object: UtxoStateVariant): string;
export interface ValidateUtxoRequest {
    outpoints: OutPoint[];
}
export interface ValidateUtxoResponse {
    utxoStates: UtxoState[];
}
export interface BroadcastTxRequest {
    rawTx: Uint8Array;
    skipSlpCheck: boolean;
}
export interface BroadcastTxResponse {
    txid: Uint8Array;
}
export interface BroadcastTxsRequest {
    rawTxs: Uint8Array[];
    skipSlpCheck: boolean;
}
export interface BroadcastTxsResponse {
    txids: Uint8Array[];
}
export interface BlockchainInfo {
    tipHash: Uint8Array;
    tipHeight: number;
}
export interface Tx {
    txid: Uint8Array;
    version: number;
    inputs: TxInput[];
    outputs: TxOutput[];
    lockTime: number;
    slpTxData: SlpTxData | undefined;
    slpErrorMsg: string;
    block: BlockMetadata | undefined;
    timeFirstSeen: string;
    size: number;
    isCoinbase: boolean;
    network?: Network;
}
export interface Utxo {
    outpoint: OutPoint | undefined;
    blockHeight: number;
    isCoinbase: boolean;
    value: string;
    slpMeta: SlpMeta | undefined;
    slpToken: SlpToken | undefined;
    network?: Network;
    isFinal?: boolean | undefined;
}
export interface Token {
    slpTxData: SlpTxData | undefined;
    tokenStats: TokenStats | undefined;
    block: BlockMetadata | undefined;
    timeFirstSeen: string;
    initialTokenQuantity: string;
    containsBaton: boolean;
    network: Network;
}
export interface BlockInfo {
    hash: Uint8Array;
    prevHash: Uint8Array;
    height: number;
    nBits: number;
    timestamp: string;
    /** Block size of this block in bytes (including headers etc.) */
    blockSize: string;
    /** Number of txs in this block */
    numTxs: string;
    /** Total number of tx inputs in block (including coinbase) */
    numInputs: string;
    /** Total number of tx output in block (including coinbase) */
    numOutputs: string;
    /** Total number of satoshis spent by tx inputs */
    sumInputSats: string;
    /** Block reward for this block */
    sumCoinbaseOutputSats: string;
    /** Total number of satoshis in non-coinbase tx outputs */
    sumNormalOutputSats: string;
    /** Total number of satoshis burned using OP_RETURN */
    sumBurnedSats: string;
}
export interface BlockDetails {
    version: number;
    merkleRoot: Uint8Array;
    nonce: string;
    medianTimestamp: string;
}
export interface Block {
    blockInfo: BlockInfo | undefined;
    blockDetails: BlockDetails | undefined;
    rawHeader: Uint8Array;
    txs: Tx[];
}
export interface ScriptUtxos {
    outputScript: Uint8Array;
    utxos: Utxo[];
}
export interface TxHistoryPage {
    txs: Tx[];
    numPages: number;
    numTxs?: number | undefined;
}
export interface Utxos {
    scriptUtxos: ScriptUtxos[];
}
export interface Blocks {
    blocks: BlockInfo[];
}
export interface SlpTxData {
    slpMeta: SlpMeta | undefined;
    genesisInfo: SlpGenesisInfo | undefined;
}
export interface SlpMeta {
    tokenType: SlpTokenType;
    txType: SlpTxType;
    tokenId: Uint8Array;
    groupTokenId: Uint8Array;
}
export interface TokenStats {
    /**
     * This doesn't fit into uint64, so we use a string with the decimal
     * representation. If available, use i128 to parse, otherwise some
     * BigNumber library.
     */
    totalMinted: string;
    totalBurned: string;
}
export interface TxInput {
    prevOut: OutPoint | undefined;
    inputScript: Uint8Array;
    outputScript: Uint8Array;
    value: string;
    sequenceNo: number;
    slpBurn: SlpBurn | undefined;
    slpToken: SlpToken | undefined;
}
export interface TxOutput {
    value: string;
    outputScript: Uint8Array;
    slpToken: SlpToken | undefined;
    spentBy: OutPoint | undefined;
}
export interface BlockMetadata {
    height: number;
    hash: Uint8Array;
    timestamp: string;
}
export interface OutPoint {
    txid: Uint8Array;
    outIdx: number;
}
export interface SlpToken {
    amount: string;
    isMintBaton: boolean;
}
export interface SlpBurn {
    token: SlpToken | undefined;
    tokenId: Uint8Array;
}
export interface SlpGenesisInfo {
    tokenTicker: Uint8Array;
    tokenName: Uint8Array;
    tokenDocumentUrl: Uint8Array;
    tokenDocumentHash: Uint8Array;
    decimals: number;
}
export interface UtxoState {
    height: number;
    isConfirmed: boolean;
    state: UtxoStateVariant;
}
export interface Subscription {
    scriptType: string;
    payload: Uint8Array;
    isSubscribe: boolean;
}
export interface SubscriptionObject {
    scriptType?: string;
    payload?: Uint8Array;
}
export declare const SubscriptionObject: {
    encode(message: SubscriptionObject, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubscriptionObject;
    fromJSON(object: any): SubscriptionObject;
    toJSON(message: SubscriptionObject): unknown;
    fromPartial<I extends {
        scriptType?: string | undefined;
        payload?: Uint8Array | undefined;
    } & {
        scriptType?: string | undefined;
        payload?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof SubscriptionObject>, never>>(object: I): SubscriptionObject;
};
export interface SubscriptionNode {
    isUnsubscribe: boolean;
    subscriptionObject: SubscriptionObject;
}
export interface SubscribeMsg {
    error: Error | undefined;
    AddedToMempool: MsgAddedToMempool | undefined;
    RemovedFromMempool: MsgRemovedFromMempool | undefined;
    Confirmed: MsgConfirmed | undefined;
    Reorg: MsgReorg | undefined;
    BlockConnected: MsgBlockConnected | undefined;
    BlockDisconnected: MsgBlockDisconnected | undefined;
}
export interface MsgAddedToMempool {
    txid: Uint8Array;
}
export interface MsgRemovedFromMempool {
    txid: Uint8Array;
}
export interface MsgConfirmed {
    txid: Uint8Array;
}
export interface MsgReorg {
    txid: Uint8Array;
}
export interface MsgBlockConnected {
    blockHash: Uint8Array;
}
export interface MsgBlockDisconnected {
    blockHash: Uint8Array;
}
export interface Error {
    errorCode: string;
    msg: string;
    isUserError: boolean;
}
export declare const ValidateUtxoRequest: {
    encode(message: ValidateUtxoRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ValidateUtxoRequest;
    fromJSON(object: any): ValidateUtxoRequest;
    toJSON(message: ValidateUtxoRequest): unknown;
    fromPartial<I extends {
        outpoints?: {
            txid?: Uint8Array | undefined;
            outIdx?: number | undefined;
        }[] | undefined;
    } & {
        outpoints?: ({
            txid?: Uint8Array | undefined;
            outIdx?: number | undefined;
        }[] & ({
            txid?: Uint8Array | undefined;
            outIdx?: number | undefined;
        } & {
            txid?: Uint8Array | undefined;
            outIdx?: number | undefined;
        } & Record<Exclude<keyof I["outpoints"][number], keyof OutPoint>, never>)[] & Record<Exclude<keyof I["outpoints"], keyof {
            txid?: Uint8Array | undefined;
            outIdx?: number | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "outpoints">, never>>(object: I): ValidateUtxoRequest;
};
export declare const ValidateUtxoResponse: {
    encode(message: ValidateUtxoResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ValidateUtxoResponse;
    fromJSON(object: any): ValidateUtxoResponse;
    toJSON(message: ValidateUtxoResponse): unknown;
    fromPartial<I extends {
        utxoStates?: {
            height?: number | undefined;
            isConfirmed?: boolean | undefined;
            state?: UtxoStateVariant | undefined;
        }[] | undefined;
    } & {
        utxoStates?: ({
            height?: number | undefined;
            isConfirmed?: boolean | undefined;
            state?: UtxoStateVariant | undefined;
        }[] & ({
            height?: number | undefined;
            isConfirmed?: boolean | undefined;
            state?: UtxoStateVariant | undefined;
        } & {
            height?: number | undefined;
            isConfirmed?: boolean | undefined;
            state?: UtxoStateVariant | undefined;
        } & Record<Exclude<keyof I["utxoStates"][number], keyof UtxoState>, never>)[] & Record<Exclude<keyof I["utxoStates"], keyof {
            height?: number | undefined;
            isConfirmed?: boolean | undefined;
            state?: UtxoStateVariant | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "utxoStates">, never>>(object: I): ValidateUtxoResponse;
};
export declare const BroadcastTxRequest: {
    encode(message: BroadcastTxRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BroadcastTxRequest;
    fromJSON(object: any): BroadcastTxRequest;
    toJSON(message: BroadcastTxRequest): unknown;
    fromPartial<I extends {
        rawTx?: Uint8Array | undefined;
        skipSlpCheck?: boolean | undefined;
    } & {
        rawTx?: Uint8Array | undefined;
        skipSlpCheck?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof BroadcastTxRequest>, never>>(object: I): BroadcastTxRequest;
};
export declare const BroadcastTxResponse: {
    encode(message: BroadcastTxResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BroadcastTxResponse;
    fromJSON(object: any): BroadcastTxResponse;
    toJSON(message: BroadcastTxResponse): unknown;
    fromPartial<I extends {
        txid?: Uint8Array | undefined;
    } & {
        txid?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, "txid">, never>>(object: I): BroadcastTxResponse;
};
export declare const BroadcastTxsRequest: {
    encode(message: BroadcastTxsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BroadcastTxsRequest;
    fromJSON(object: any): BroadcastTxsRequest;
    toJSON(message: BroadcastTxsRequest): unknown;
    fromPartial<I extends {
        rawTxs?: Uint8Array[] | undefined;
        skipSlpCheck?: boolean | undefined;
    } & {
        rawTxs?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["rawTxs"], keyof Uint8Array[]>, never>) | undefined;
        skipSlpCheck?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof BroadcastTxsRequest>, never>>(object: I): BroadcastTxsRequest;
};
export declare const BroadcastTxsResponse: {
    encode(message: BroadcastTxsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BroadcastTxsResponse;
    fromJSON(object: any): BroadcastTxsResponse;
    toJSON(message: BroadcastTxsResponse): unknown;
    fromPartial<I extends {
        txids?: Uint8Array[] | undefined;
    } & {
        txids?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["txids"], keyof Uint8Array[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "txids">, never>>(object: I): BroadcastTxsResponse;
};
export declare const BlockchainInfo: {
    encode(message: BlockchainInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockchainInfo;
    fromJSON(object: any): BlockchainInfo;
    toJSON(message: BlockchainInfo): unknown;
    fromPartial<I extends {
        tipHash?: Uint8Array | undefined;
        tipHeight?: number | undefined;
    } & {
        tipHash?: Uint8Array | undefined;
        tipHeight?: number | undefined;
    } & Record<Exclude<keyof I, keyof BlockchainInfo>, never>>(object: I): BlockchainInfo;
};
export declare const Tx: {
    encode(message: Tx, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Tx;
    fromJSON(object: any): Tx;
    toJSON(message: Tx): unknown;
    fromPartial<I extends {
        txid?: Uint8Array | undefined;
        version?: number | undefined;
        inputs?: {
            prevOut?: {
                txid?: Uint8Array | undefined;
                outIdx?: number | undefined;
            } | undefined;
            inputScript?: Uint8Array | undefined;
            outputScript?: Uint8Array | undefined;
            value?: string | undefined;
            sequenceNo?: number | undefined;
            slpBurn?: {
                token?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
                tokenId?: Uint8Array | undefined;
            } | undefined;
            slpToken?: {
                amount?: string | undefined;
                isMintBaton?: boolean | undefined;
            } | undefined;
        }[] | undefined;
        outputs?: {
            value?: string | undefined;
            outputScript?: Uint8Array | undefined;
            slpToken?: {
                amount?: string | undefined;
                isMintBaton?: boolean | undefined;
            } | undefined;
            spentBy?: {
                txid?: Uint8Array | undefined;
                outIdx?: number | undefined;
            } | undefined;
        }[] | undefined;
        lockTime?: number | undefined;
        slpTxData?: {
            slpMeta?: {
                tokenType?: SlpTokenType | undefined;
                txType?: SlpTxType | undefined;
                tokenId?: Uint8Array | undefined;
                groupTokenId?: Uint8Array | undefined;
            } | undefined;
            genesisInfo?: {
                tokenTicker?: Uint8Array | undefined;
                tokenName?: Uint8Array | undefined;
                tokenDocumentUrl?: Uint8Array | undefined;
                tokenDocumentHash?: Uint8Array | undefined;
                decimals?: number | undefined;
            } | undefined;
        } | undefined;
        slpErrorMsg?: string | undefined;
        block?: {
            height?: number | undefined;
            hash?: Uint8Array | undefined;
            timestamp?: string | undefined;
        } | undefined;
        timeFirstSeen?: string | undefined;
        size?: number | undefined;
        isCoinbase?: boolean | undefined;
        network?: Network | undefined;
    } & {
        txid?: Uint8Array | undefined;
        version?: number | undefined;
        inputs?: ({
            prevOut?: {
                txid?: Uint8Array | undefined;
                outIdx?: number | undefined;
            } | undefined;
            inputScript?: Uint8Array | undefined;
            outputScript?: Uint8Array | undefined;
            value?: string | undefined;
            sequenceNo?: number | undefined;
            slpBurn?: {
                token?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
                tokenId?: Uint8Array | undefined;
            } | undefined;
            slpToken?: {
                amount?: string | undefined;
                isMintBaton?: boolean | undefined;
            } | undefined;
        }[] & ({
            prevOut?: {
                txid?: Uint8Array | undefined;
                outIdx?: number | undefined;
            } | undefined;
            inputScript?: Uint8Array | undefined;
            outputScript?: Uint8Array | undefined;
            value?: string | undefined;
            sequenceNo?: number | undefined;
            slpBurn?: {
                token?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
                tokenId?: Uint8Array | undefined;
            } | undefined;
            slpToken?: {
                amount?: string | undefined;
                isMintBaton?: boolean | undefined;
            } | undefined;
        } & {
            prevOut?: ({
                txid?: Uint8Array | undefined;
                outIdx?: number | undefined;
            } & {
                txid?: Uint8Array | undefined;
                outIdx?: number | undefined;
            } & Record<Exclude<keyof I["inputs"][number]["prevOut"], keyof OutPoint>, never>) | undefined;
            inputScript?: Uint8Array | undefined;
            outputScript?: Uint8Array | undefined;
            value?: string | undefined;
            sequenceNo?: number | undefined;
            slpBurn?: ({
                token?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
                tokenId?: Uint8Array | undefined;
            } & {
                token?: ({
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } & {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } & Record<Exclude<keyof I["inputs"][number]["slpBurn"]["token"], keyof SlpToken>, never>) | undefined;
                tokenId?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["inputs"][number]["slpBurn"], keyof SlpBurn>, never>) | undefined;
            slpToken?: ({
                amount?: string | undefined;
                isMintBaton?: boolean | undefined;
            } & {
                amount?: string | undefined;
                isMintBaton?: boolean | undefined;
            } & Record<Exclude<keyof I["inputs"][number]["slpToken"], keyof SlpToken>, never>) | undefined;
        } & Record<Exclude<keyof I["inputs"][number], keyof TxInput>, never>)[] & Record<Exclude<keyof I["inputs"], keyof {
            prevOut?: {
                txid?: Uint8Array | undefined;
                outIdx?: number | undefined;
            } | undefined;
            inputScript?: Uint8Array | undefined;
            outputScript?: Uint8Array | undefined;
            value?: string | undefined;
            sequenceNo?: number | undefined;
            slpBurn?: {
                token?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
                tokenId?: Uint8Array | undefined;
            } | undefined;
            slpToken?: {
                amount?: string | undefined;
                isMintBaton?: boolean | undefined;
            } | undefined;
        }[]>, never>) | undefined;
        outputs?: ({
            value?: string | undefined;
            outputScript?: Uint8Array | undefined;
            slpToken?: {
                amount?: string | undefined;
                isMintBaton?: boolean | undefined;
            } | undefined;
            spentBy?: {
                txid?: Uint8Array | undefined;
                outIdx?: number | undefined;
            } | undefined;
        }[] & ({
            value?: string | undefined;
            outputScript?: Uint8Array | undefined;
            slpToken?: {
                amount?: string | undefined;
                isMintBaton?: boolean | undefined;
            } | undefined;
            spentBy?: {
                txid?: Uint8Array | undefined;
                outIdx?: number | undefined;
            } | undefined;
        } & {
            value?: string | undefined;
            outputScript?: Uint8Array | undefined;
            slpToken?: ({
                amount?: string | undefined;
                isMintBaton?: boolean | undefined;
            } & {
                amount?: string | undefined;
                isMintBaton?: boolean | undefined;
            } & Record<Exclude<keyof I["outputs"][number]["slpToken"], keyof SlpToken>, never>) | undefined;
            spentBy?: ({
                txid?: Uint8Array | undefined;
                outIdx?: number | undefined;
            } & {
                txid?: Uint8Array | undefined;
                outIdx?: number | undefined;
            } & Record<Exclude<keyof I["outputs"][number]["spentBy"], keyof OutPoint>, never>) | undefined;
        } & Record<Exclude<keyof I["outputs"][number], keyof TxOutput>, never>)[] & Record<Exclude<keyof I["outputs"], keyof {
            value?: string | undefined;
            outputScript?: Uint8Array | undefined;
            slpToken?: {
                amount?: string | undefined;
                isMintBaton?: boolean | undefined;
            } | undefined;
            spentBy?: {
                txid?: Uint8Array | undefined;
                outIdx?: number | undefined;
            } | undefined;
        }[]>, never>) | undefined;
        lockTime?: number | undefined;
        slpTxData?: ({
            slpMeta?: {
                tokenType?: SlpTokenType | undefined;
                txType?: SlpTxType | undefined;
                tokenId?: Uint8Array | undefined;
                groupTokenId?: Uint8Array | undefined;
            } | undefined;
            genesisInfo?: {
                tokenTicker?: Uint8Array | undefined;
                tokenName?: Uint8Array | undefined;
                tokenDocumentUrl?: Uint8Array | undefined;
                tokenDocumentHash?: Uint8Array | undefined;
                decimals?: number | undefined;
            } | undefined;
        } & {
            slpMeta?: ({
                tokenType?: SlpTokenType | undefined;
                txType?: SlpTxType | undefined;
                tokenId?: Uint8Array | undefined;
                groupTokenId?: Uint8Array | undefined;
            } & {
                tokenType?: SlpTokenType | undefined;
                txType?: SlpTxType | undefined;
                tokenId?: Uint8Array | undefined;
                groupTokenId?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["slpTxData"]["slpMeta"], keyof SlpMeta>, never>) | undefined;
            genesisInfo?: ({
                tokenTicker?: Uint8Array | undefined;
                tokenName?: Uint8Array | undefined;
                tokenDocumentUrl?: Uint8Array | undefined;
                tokenDocumentHash?: Uint8Array | undefined;
                decimals?: number | undefined;
            } & {
                tokenTicker?: Uint8Array | undefined;
                tokenName?: Uint8Array | undefined;
                tokenDocumentUrl?: Uint8Array | undefined;
                tokenDocumentHash?: Uint8Array | undefined;
                decimals?: number | undefined;
            } & Record<Exclude<keyof I["slpTxData"]["genesisInfo"], keyof SlpGenesisInfo>, never>) | undefined;
        } & Record<Exclude<keyof I["slpTxData"], keyof SlpTxData>, never>) | undefined;
        slpErrorMsg?: string | undefined;
        block?: ({
            height?: number | undefined;
            hash?: Uint8Array | undefined;
            timestamp?: string | undefined;
        } & {
            height?: number | undefined;
            hash?: Uint8Array | undefined;
            timestamp?: string | undefined;
        } & Record<Exclude<keyof I["block"], keyof BlockMetadata>, never>) | undefined;
        timeFirstSeen?: string | undefined;
        size?: number | undefined;
        isCoinbase?: boolean | undefined;
        network?: Network | undefined;
    } & Record<Exclude<keyof I, keyof Tx>, never>>(object: I): Tx;
};
export declare const Utxo: {
    encode(message: Utxo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Utxo;
    fromJSON(object: any): Utxo;
    toJSON(message: Utxo): unknown;
    fromPartial<I extends {
        outpoint?: {
            txid?: Uint8Array | undefined;
            outIdx?: number | undefined;
        } | undefined;
        blockHeight?: number | undefined;
        isCoinbase?: boolean | undefined;
        value?: string | undefined;
        slpMeta?: {
            tokenType?: SlpTokenType | undefined;
            txType?: SlpTxType | undefined;
            tokenId?: Uint8Array | undefined;
            groupTokenId?: Uint8Array | undefined;
        } | undefined;
        slpToken?: {
            amount?: string | undefined;
            isMintBaton?: boolean | undefined;
        } | undefined;
        network?: Network | undefined;
        isFinal?: boolean | undefined;
    } & {
        outpoint?: ({
            txid?: Uint8Array | undefined;
            outIdx?: number | undefined;
        } & {
            txid?: Uint8Array | undefined;
            outIdx?: number | undefined;
        } & Record<Exclude<keyof I["outpoint"], keyof OutPoint>, never>) | undefined;
        blockHeight?: number | undefined;
        isCoinbase?: boolean | undefined;
        value?: string | undefined;
        slpMeta?: ({
            tokenType?: SlpTokenType | undefined;
            txType?: SlpTxType | undefined;
            tokenId?: Uint8Array | undefined;
            groupTokenId?: Uint8Array | undefined;
        } & {
            tokenType?: SlpTokenType | undefined;
            txType?: SlpTxType | undefined;
            tokenId?: Uint8Array | undefined;
            groupTokenId?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["slpMeta"], keyof SlpMeta>, never>) | undefined;
        slpToken?: ({
            amount?: string | undefined;
            isMintBaton?: boolean | undefined;
        } & {
            amount?: string | undefined;
            isMintBaton?: boolean | undefined;
        } & Record<Exclude<keyof I["slpToken"], keyof SlpToken>, never>) | undefined;
        network?: Network | undefined;
        isFinal?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof Utxo>, never>>(object: I): Utxo;
};
export declare const Token: {
    encode(message: Token, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Token;
    fromJSON(object: any): Token;
    toJSON(message: Token): unknown;
    fromPartial<I extends {
        slpTxData?: {
            slpMeta?: {
                tokenType?: SlpTokenType | undefined;
                txType?: SlpTxType | undefined;
                tokenId?: Uint8Array | undefined;
                groupTokenId?: Uint8Array | undefined;
            } | undefined;
            genesisInfo?: {
                tokenTicker?: Uint8Array | undefined;
                tokenName?: Uint8Array | undefined;
                tokenDocumentUrl?: Uint8Array | undefined;
                tokenDocumentHash?: Uint8Array | undefined;
                decimals?: number | undefined;
            } | undefined;
        } | undefined;
        tokenStats?: {
            totalMinted?: string | undefined;
            totalBurned?: string | undefined;
        } | undefined;
        block?: {
            height?: number | undefined;
            hash?: Uint8Array | undefined;
            timestamp?: string | undefined;
        } | undefined;
        timeFirstSeen?: string | undefined;
        initialTokenQuantity?: string | undefined;
        containsBaton?: boolean | undefined;
        network?: Network | undefined;
    } & {
        slpTxData?: ({
            slpMeta?: {
                tokenType?: SlpTokenType | undefined;
                txType?: SlpTxType | undefined;
                tokenId?: Uint8Array | undefined;
                groupTokenId?: Uint8Array | undefined;
            } | undefined;
            genesisInfo?: {
                tokenTicker?: Uint8Array | undefined;
                tokenName?: Uint8Array | undefined;
                tokenDocumentUrl?: Uint8Array | undefined;
                tokenDocumentHash?: Uint8Array | undefined;
                decimals?: number | undefined;
            } | undefined;
        } & {
            slpMeta?: ({
                tokenType?: SlpTokenType | undefined;
                txType?: SlpTxType | undefined;
                tokenId?: Uint8Array | undefined;
                groupTokenId?: Uint8Array | undefined;
            } & {
                tokenType?: SlpTokenType | undefined;
                txType?: SlpTxType | undefined;
                tokenId?: Uint8Array | undefined;
                groupTokenId?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["slpTxData"]["slpMeta"], keyof SlpMeta>, never>) | undefined;
            genesisInfo?: ({
                tokenTicker?: Uint8Array | undefined;
                tokenName?: Uint8Array | undefined;
                tokenDocumentUrl?: Uint8Array | undefined;
                tokenDocumentHash?: Uint8Array | undefined;
                decimals?: number | undefined;
            } & {
                tokenTicker?: Uint8Array | undefined;
                tokenName?: Uint8Array | undefined;
                tokenDocumentUrl?: Uint8Array | undefined;
                tokenDocumentHash?: Uint8Array | undefined;
                decimals?: number | undefined;
            } & Record<Exclude<keyof I["slpTxData"]["genesisInfo"], keyof SlpGenesisInfo>, never>) | undefined;
        } & Record<Exclude<keyof I["slpTxData"], keyof SlpTxData>, never>) | undefined;
        tokenStats?: ({
            totalMinted?: string | undefined;
            totalBurned?: string | undefined;
        } & {
            totalMinted?: string | undefined;
            totalBurned?: string | undefined;
        } & Record<Exclude<keyof I["tokenStats"], keyof TokenStats>, never>) | undefined;
        block?: ({
            height?: number | undefined;
            hash?: Uint8Array | undefined;
            timestamp?: string | undefined;
        } & {
            height?: number | undefined;
            hash?: Uint8Array | undefined;
            timestamp?: string | undefined;
        } & Record<Exclude<keyof I["block"], keyof BlockMetadata>, never>) | undefined;
        timeFirstSeen?: string | undefined;
        initialTokenQuantity?: string | undefined;
        containsBaton?: boolean | undefined;
        network?: Network | undefined;
    } & Record<Exclude<keyof I, keyof Token>, never>>(object: I): Token;
};
export declare const BlockInfo: {
    encode(message: BlockInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockInfo;
    fromJSON(object: any): BlockInfo;
    toJSON(message: BlockInfo): unknown;
    fromPartial<I extends {
        hash?: Uint8Array | undefined;
        prevHash?: Uint8Array | undefined;
        height?: number | undefined;
        nBits?: number | undefined;
        timestamp?: string | undefined;
        blockSize?: string | undefined;
        numTxs?: string | undefined;
        numInputs?: string | undefined;
        numOutputs?: string | undefined;
        sumInputSats?: string | undefined;
        sumCoinbaseOutputSats?: string | undefined;
        sumNormalOutputSats?: string | undefined;
        sumBurnedSats?: string | undefined;
    } & {
        hash?: Uint8Array | undefined;
        prevHash?: Uint8Array | undefined;
        height?: number | undefined;
        nBits?: number | undefined;
        timestamp?: string | undefined;
        blockSize?: string | undefined;
        numTxs?: string | undefined;
        numInputs?: string | undefined;
        numOutputs?: string | undefined;
        sumInputSats?: string | undefined;
        sumCoinbaseOutputSats?: string | undefined;
        sumNormalOutputSats?: string | undefined;
        sumBurnedSats?: string | undefined;
    } & Record<Exclude<keyof I, keyof BlockInfo>, never>>(object: I): BlockInfo;
};
export declare const BlockDetails: {
    encode(message: BlockDetails, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockDetails;
    fromJSON(object: any): BlockDetails;
    toJSON(message: BlockDetails): unknown;
    fromPartial<I extends {
        version?: number | undefined;
        merkleRoot?: Uint8Array | undefined;
        nonce?: string | undefined;
        medianTimestamp?: string | undefined;
    } & {
        version?: number | undefined;
        merkleRoot?: Uint8Array | undefined;
        nonce?: string | undefined;
        medianTimestamp?: string | undefined;
    } & Record<Exclude<keyof I, keyof BlockDetails>, never>>(object: I): BlockDetails;
};
export declare const Block: {
    encode(message: Block, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Block;
    fromJSON(object: any): Block;
    toJSON(message: Block): unknown;
    fromPartial<I extends {
        blockInfo?: {
            hash?: Uint8Array | undefined;
            prevHash?: Uint8Array | undefined;
            height?: number | undefined;
            nBits?: number | undefined;
            timestamp?: string | undefined;
            blockSize?: string | undefined;
            numTxs?: string | undefined;
            numInputs?: string | undefined;
            numOutputs?: string | undefined;
            sumInputSats?: string | undefined;
            sumCoinbaseOutputSats?: string | undefined;
            sumNormalOutputSats?: string | undefined;
            sumBurnedSats?: string | undefined;
        } | undefined;
        blockDetails?: {
            version?: number | undefined;
            merkleRoot?: Uint8Array | undefined;
            nonce?: string | undefined;
            medianTimestamp?: string | undefined;
        } | undefined;
        rawHeader?: Uint8Array | undefined;
        txs?: {
            txid?: Uint8Array | undefined;
            version?: number | undefined;
            inputs?: {
                prevOut?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
                inputScript?: Uint8Array | undefined;
                outputScript?: Uint8Array | undefined;
                value?: string | undefined;
                sequenceNo?: number | undefined;
                slpBurn?: {
                    token?: {
                        amount?: string | undefined;
                        isMintBaton?: boolean | undefined;
                    } | undefined;
                    tokenId?: Uint8Array | undefined;
                } | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
            }[] | undefined;
            outputs?: {
                value?: string | undefined;
                outputScript?: Uint8Array | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
                spentBy?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
            }[] | undefined;
            lockTime?: number | undefined;
            slpTxData?: {
                slpMeta?: {
                    tokenType?: SlpTokenType | undefined;
                    txType?: SlpTxType | undefined;
                    tokenId?: Uint8Array | undefined;
                    groupTokenId?: Uint8Array | undefined;
                } | undefined;
                genesisInfo?: {
                    tokenTicker?: Uint8Array | undefined;
                    tokenName?: Uint8Array | undefined;
                    tokenDocumentUrl?: Uint8Array | undefined;
                    tokenDocumentHash?: Uint8Array | undefined;
                    decimals?: number | undefined;
                } | undefined;
            } | undefined;
            slpErrorMsg?: string | undefined;
            block?: {
                height?: number | undefined;
                hash?: Uint8Array | undefined;
                timestamp?: string | undefined;
            } | undefined;
            timeFirstSeen?: string | undefined;
            size?: number | undefined;
            isCoinbase?: boolean | undefined;
            network?: Network | undefined;
        }[] | undefined;
    } & {
        blockInfo?: ({
            hash?: Uint8Array | undefined;
            prevHash?: Uint8Array | undefined;
            height?: number | undefined;
            nBits?: number | undefined;
            timestamp?: string | undefined;
            blockSize?: string | undefined;
            numTxs?: string | undefined;
            numInputs?: string | undefined;
            numOutputs?: string | undefined;
            sumInputSats?: string | undefined;
            sumCoinbaseOutputSats?: string | undefined;
            sumNormalOutputSats?: string | undefined;
            sumBurnedSats?: string | undefined;
        } & {
            hash?: Uint8Array | undefined;
            prevHash?: Uint8Array | undefined;
            height?: number | undefined;
            nBits?: number | undefined;
            timestamp?: string | undefined;
            blockSize?: string | undefined;
            numTxs?: string | undefined;
            numInputs?: string | undefined;
            numOutputs?: string | undefined;
            sumInputSats?: string | undefined;
            sumCoinbaseOutputSats?: string | undefined;
            sumNormalOutputSats?: string | undefined;
            sumBurnedSats?: string | undefined;
        } & Record<Exclude<keyof I["blockInfo"], keyof BlockInfo>, never>) | undefined;
        blockDetails?: ({
            version?: number | undefined;
            merkleRoot?: Uint8Array | undefined;
            nonce?: string | undefined;
            medianTimestamp?: string | undefined;
        } & {
            version?: number | undefined;
            merkleRoot?: Uint8Array | undefined;
            nonce?: string | undefined;
            medianTimestamp?: string | undefined;
        } & Record<Exclude<keyof I["blockDetails"], keyof BlockDetails>, never>) | undefined;
        rawHeader?: Uint8Array | undefined;
        txs?: ({
            txid?: Uint8Array | undefined;
            version?: number | undefined;
            inputs?: {
                prevOut?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
                inputScript?: Uint8Array | undefined;
                outputScript?: Uint8Array | undefined;
                value?: string | undefined;
                sequenceNo?: number | undefined;
                slpBurn?: {
                    token?: {
                        amount?: string | undefined;
                        isMintBaton?: boolean | undefined;
                    } | undefined;
                    tokenId?: Uint8Array | undefined;
                } | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
            }[] | undefined;
            outputs?: {
                value?: string | undefined;
                outputScript?: Uint8Array | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
                spentBy?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
            }[] | undefined;
            lockTime?: number | undefined;
            slpTxData?: {
                slpMeta?: {
                    tokenType?: SlpTokenType | undefined;
                    txType?: SlpTxType | undefined;
                    tokenId?: Uint8Array | undefined;
                    groupTokenId?: Uint8Array | undefined;
                } | undefined;
                genesisInfo?: {
                    tokenTicker?: Uint8Array | undefined;
                    tokenName?: Uint8Array | undefined;
                    tokenDocumentUrl?: Uint8Array | undefined;
                    tokenDocumentHash?: Uint8Array | undefined;
                    decimals?: number | undefined;
                } | undefined;
            } | undefined;
            slpErrorMsg?: string | undefined;
            block?: {
                height?: number | undefined;
                hash?: Uint8Array | undefined;
                timestamp?: string | undefined;
            } | undefined;
            timeFirstSeen?: string | undefined;
            size?: number | undefined;
            isCoinbase?: boolean | undefined;
            network?: Network | undefined;
        }[] & ({
            txid?: Uint8Array | undefined;
            version?: number | undefined;
            inputs?: {
                prevOut?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
                inputScript?: Uint8Array | undefined;
                outputScript?: Uint8Array | undefined;
                value?: string | undefined;
                sequenceNo?: number | undefined;
                slpBurn?: {
                    token?: {
                        amount?: string | undefined;
                        isMintBaton?: boolean | undefined;
                    } | undefined;
                    tokenId?: Uint8Array | undefined;
                } | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
            }[] | undefined;
            outputs?: {
                value?: string | undefined;
                outputScript?: Uint8Array | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
                spentBy?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
            }[] | undefined;
            lockTime?: number | undefined;
            slpTxData?: {
                slpMeta?: {
                    tokenType?: SlpTokenType | undefined;
                    txType?: SlpTxType | undefined;
                    tokenId?: Uint8Array | undefined;
                    groupTokenId?: Uint8Array | undefined;
                } | undefined;
                genesisInfo?: {
                    tokenTicker?: Uint8Array | undefined;
                    tokenName?: Uint8Array | undefined;
                    tokenDocumentUrl?: Uint8Array | undefined;
                    tokenDocumentHash?: Uint8Array | undefined;
                    decimals?: number | undefined;
                } | undefined;
            } | undefined;
            slpErrorMsg?: string | undefined;
            block?: {
                height?: number | undefined;
                hash?: Uint8Array | undefined;
                timestamp?: string | undefined;
            } | undefined;
            timeFirstSeen?: string | undefined;
            size?: number | undefined;
            isCoinbase?: boolean | undefined;
            network?: Network | undefined;
        } & {
            txid?: Uint8Array | undefined;
            version?: number | undefined;
            inputs?: ({
                prevOut?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
                inputScript?: Uint8Array | undefined;
                outputScript?: Uint8Array | undefined;
                value?: string | undefined;
                sequenceNo?: number | undefined;
                slpBurn?: {
                    token?: {
                        amount?: string | undefined;
                        isMintBaton?: boolean | undefined;
                    } | undefined;
                    tokenId?: Uint8Array | undefined;
                } | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
            }[] & ({
                prevOut?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
                inputScript?: Uint8Array | undefined;
                outputScript?: Uint8Array | undefined;
                value?: string | undefined;
                sequenceNo?: number | undefined;
                slpBurn?: {
                    token?: {
                        amount?: string | undefined;
                        isMintBaton?: boolean | undefined;
                    } | undefined;
                    tokenId?: Uint8Array | undefined;
                } | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
            } & {
                prevOut?: ({
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } & {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } & Record<Exclude<keyof I["txs"][number]["inputs"][number]["prevOut"], keyof OutPoint>, never>) | undefined;
                inputScript?: Uint8Array | undefined;
                outputScript?: Uint8Array | undefined;
                value?: string | undefined;
                sequenceNo?: number | undefined;
                slpBurn?: ({
                    token?: {
                        amount?: string | undefined;
                        isMintBaton?: boolean | undefined;
                    } | undefined;
                    tokenId?: Uint8Array | undefined;
                } & {
                    token?: ({
                        amount?: string | undefined;
                        isMintBaton?: boolean | undefined;
                    } & {
                        amount?: string | undefined;
                        isMintBaton?: boolean | undefined;
                    } & Record<Exclude<keyof I["txs"][number]["inputs"][number]["slpBurn"]["token"], keyof SlpToken>, never>) | undefined;
                    tokenId?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["txs"][number]["inputs"][number]["slpBurn"], keyof SlpBurn>, never>) | undefined;
                slpToken?: ({
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } & {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } & Record<Exclude<keyof I["txs"][number]["inputs"][number]["slpToken"], keyof SlpToken>, never>) | undefined;
            } & Record<Exclude<keyof I["txs"][number]["inputs"][number], keyof TxInput>, never>)[] & Record<Exclude<keyof I["txs"][number]["inputs"], keyof {
                prevOut?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
                inputScript?: Uint8Array | undefined;
                outputScript?: Uint8Array | undefined;
                value?: string | undefined;
                sequenceNo?: number | undefined;
                slpBurn?: {
                    token?: {
                        amount?: string | undefined;
                        isMintBaton?: boolean | undefined;
                    } | undefined;
                    tokenId?: Uint8Array | undefined;
                } | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
            }[]>, never>) | undefined;
            outputs?: ({
                value?: string | undefined;
                outputScript?: Uint8Array | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
                spentBy?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
            }[] & ({
                value?: string | undefined;
                outputScript?: Uint8Array | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
                spentBy?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
            } & {
                value?: string | undefined;
                outputScript?: Uint8Array | undefined;
                slpToken?: ({
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } & {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } & Record<Exclude<keyof I["txs"][number]["outputs"][number]["slpToken"], keyof SlpToken>, never>) | undefined;
                spentBy?: ({
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } & {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } & Record<Exclude<keyof I["txs"][number]["outputs"][number]["spentBy"], keyof OutPoint>, never>) | undefined;
            } & Record<Exclude<keyof I["txs"][number]["outputs"][number], keyof TxOutput>, never>)[] & Record<Exclude<keyof I["txs"][number]["outputs"], keyof {
                value?: string | undefined;
                outputScript?: Uint8Array | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
                spentBy?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
            }[]>, never>) | undefined;
            lockTime?: number | undefined;
            slpTxData?: ({
                slpMeta?: {
                    tokenType?: SlpTokenType | undefined;
                    txType?: SlpTxType | undefined;
                    tokenId?: Uint8Array | undefined;
                    groupTokenId?: Uint8Array | undefined;
                } | undefined;
                genesisInfo?: {
                    tokenTicker?: Uint8Array | undefined;
                    tokenName?: Uint8Array | undefined;
                    tokenDocumentUrl?: Uint8Array | undefined;
                    tokenDocumentHash?: Uint8Array | undefined;
                    decimals?: number | undefined;
                } | undefined;
            } & {
                slpMeta?: ({
                    tokenType?: SlpTokenType | undefined;
                    txType?: SlpTxType | undefined;
                    tokenId?: Uint8Array | undefined;
                    groupTokenId?: Uint8Array | undefined;
                } & {
                    tokenType?: SlpTokenType | undefined;
                    txType?: SlpTxType | undefined;
                    tokenId?: Uint8Array | undefined;
                    groupTokenId?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["txs"][number]["slpTxData"]["slpMeta"], keyof SlpMeta>, never>) | undefined;
                genesisInfo?: ({
                    tokenTicker?: Uint8Array | undefined;
                    tokenName?: Uint8Array | undefined;
                    tokenDocumentUrl?: Uint8Array | undefined;
                    tokenDocumentHash?: Uint8Array | undefined;
                    decimals?: number | undefined;
                } & {
                    tokenTicker?: Uint8Array | undefined;
                    tokenName?: Uint8Array | undefined;
                    tokenDocumentUrl?: Uint8Array | undefined;
                    tokenDocumentHash?: Uint8Array | undefined;
                    decimals?: number | undefined;
                } & Record<Exclude<keyof I["txs"][number]["slpTxData"]["genesisInfo"], keyof SlpGenesisInfo>, never>) | undefined;
            } & Record<Exclude<keyof I["txs"][number]["slpTxData"], keyof SlpTxData>, never>) | undefined;
            slpErrorMsg?: string | undefined;
            block?: ({
                height?: number | undefined;
                hash?: Uint8Array | undefined;
                timestamp?: string | undefined;
            } & {
                height?: number | undefined;
                hash?: Uint8Array | undefined;
                timestamp?: string | undefined;
            } & Record<Exclude<keyof I["txs"][number]["block"], keyof BlockMetadata>, never>) | undefined;
            timeFirstSeen?: string | undefined;
            size?: number | undefined;
            isCoinbase?: boolean | undefined;
            network?: Network | undefined;
        } & Record<Exclude<keyof I["txs"][number], keyof Tx>, never>)[] & Record<Exclude<keyof I["txs"], keyof {
            txid?: Uint8Array | undefined;
            version?: number | undefined;
            inputs?: {
                prevOut?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
                inputScript?: Uint8Array | undefined;
                outputScript?: Uint8Array | undefined;
                value?: string | undefined;
                sequenceNo?: number | undefined;
                slpBurn?: {
                    token?: {
                        amount?: string | undefined;
                        isMintBaton?: boolean | undefined;
                    } | undefined;
                    tokenId?: Uint8Array | undefined;
                } | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
            }[] | undefined;
            outputs?: {
                value?: string | undefined;
                outputScript?: Uint8Array | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
                spentBy?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
            }[] | undefined;
            lockTime?: number | undefined;
            slpTxData?: {
                slpMeta?: {
                    tokenType?: SlpTokenType | undefined;
                    txType?: SlpTxType | undefined;
                    tokenId?: Uint8Array | undefined;
                    groupTokenId?: Uint8Array | undefined;
                } | undefined;
                genesisInfo?: {
                    tokenTicker?: Uint8Array | undefined;
                    tokenName?: Uint8Array | undefined;
                    tokenDocumentUrl?: Uint8Array | undefined;
                    tokenDocumentHash?: Uint8Array | undefined;
                    decimals?: number | undefined;
                } | undefined;
            } | undefined;
            slpErrorMsg?: string | undefined;
            block?: {
                height?: number | undefined;
                hash?: Uint8Array | undefined;
                timestamp?: string | undefined;
            } | undefined;
            timeFirstSeen?: string | undefined;
            size?: number | undefined;
            isCoinbase?: boolean | undefined;
            network?: Network | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof Block>, never>>(object: I): Block;
};
export declare const ScriptUtxos: {
    encode(message: ScriptUtxos, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ScriptUtxos;
    fromJSON(object: any): ScriptUtxos;
    toJSON(message: ScriptUtxos): unknown;
    fromPartial<I extends {
        outputScript?: Uint8Array | undefined;
        utxos?: {
            outpoint?: {
                txid?: Uint8Array | undefined;
                outIdx?: number | undefined;
            } | undefined;
            blockHeight?: number | undefined;
            isCoinbase?: boolean | undefined;
            value?: string | undefined;
            slpMeta?: {
                tokenType?: SlpTokenType | undefined;
                txType?: SlpTxType | undefined;
                tokenId?: Uint8Array | undefined;
                groupTokenId?: Uint8Array | undefined;
            } | undefined;
            slpToken?: {
                amount?: string | undefined;
                isMintBaton?: boolean | undefined;
            } | undefined;
            network?: Network | undefined;
            isFinal?: boolean | undefined;
        }[] | undefined;
    } & {
        outputScript?: Uint8Array | undefined;
        utxos?: ({
            outpoint?: {
                txid?: Uint8Array | undefined;
                outIdx?: number | undefined;
            } | undefined;
            blockHeight?: number | undefined;
            isCoinbase?: boolean | undefined;
            value?: string | undefined;
            slpMeta?: {
                tokenType?: SlpTokenType | undefined;
                txType?: SlpTxType | undefined;
                tokenId?: Uint8Array | undefined;
                groupTokenId?: Uint8Array | undefined;
            } | undefined;
            slpToken?: {
                amount?: string | undefined;
                isMintBaton?: boolean | undefined;
            } | undefined;
            network?: Network | undefined;
            isFinal?: boolean | undefined;
        }[] & ({
            outpoint?: {
                txid?: Uint8Array | undefined;
                outIdx?: number | undefined;
            } | undefined;
            blockHeight?: number | undefined;
            isCoinbase?: boolean | undefined;
            value?: string | undefined;
            slpMeta?: {
                tokenType?: SlpTokenType | undefined;
                txType?: SlpTxType | undefined;
                tokenId?: Uint8Array | undefined;
                groupTokenId?: Uint8Array | undefined;
            } | undefined;
            slpToken?: {
                amount?: string | undefined;
                isMintBaton?: boolean | undefined;
            } | undefined;
            network?: Network | undefined;
            isFinal?: boolean | undefined;
        } & {
            outpoint?: ({
                txid?: Uint8Array | undefined;
                outIdx?: number | undefined;
            } & {
                txid?: Uint8Array | undefined;
                outIdx?: number | undefined;
            } & Record<Exclude<keyof I["utxos"][number]["outpoint"], keyof OutPoint>, never>) | undefined;
            blockHeight?: number | undefined;
            isCoinbase?: boolean | undefined;
            value?: string | undefined;
            slpMeta?: ({
                tokenType?: SlpTokenType | undefined;
                txType?: SlpTxType | undefined;
                tokenId?: Uint8Array | undefined;
                groupTokenId?: Uint8Array | undefined;
            } & {
                tokenType?: SlpTokenType | undefined;
                txType?: SlpTxType | undefined;
                tokenId?: Uint8Array | undefined;
                groupTokenId?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["utxos"][number]["slpMeta"], keyof SlpMeta>, never>) | undefined;
            slpToken?: ({
                amount?: string | undefined;
                isMintBaton?: boolean | undefined;
            } & {
                amount?: string | undefined;
                isMintBaton?: boolean | undefined;
            } & Record<Exclude<keyof I["utxos"][number]["slpToken"], keyof SlpToken>, never>) | undefined;
            network?: Network | undefined;
            isFinal?: boolean | undefined;
        } & Record<Exclude<keyof I["utxos"][number], keyof Utxo>, never>)[] & Record<Exclude<keyof I["utxos"], keyof {
            outpoint?: {
                txid?: Uint8Array | undefined;
                outIdx?: number | undefined;
            } | undefined;
            blockHeight?: number | undefined;
            isCoinbase?: boolean | undefined;
            value?: string | undefined;
            slpMeta?: {
                tokenType?: SlpTokenType | undefined;
                txType?: SlpTxType | undefined;
                tokenId?: Uint8Array | undefined;
                groupTokenId?: Uint8Array | undefined;
            } | undefined;
            slpToken?: {
                amount?: string | undefined;
                isMintBaton?: boolean | undefined;
            } | undefined;
            network?: Network | undefined;
            isFinal?: boolean | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof ScriptUtxos>, never>>(object: I): ScriptUtxos;
};
export declare const TxHistoryPage: {
    encode(message: TxHistoryPage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TxHistoryPage;
    fromJSON(object: any): TxHistoryPage;
    toJSON(message: TxHistoryPage): unknown;
    fromPartial<I extends {
        txs?: {
            txid?: Uint8Array | undefined;
            version?: number | undefined;
            inputs?: {
                prevOut?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
                inputScript?: Uint8Array | undefined;
                outputScript?: Uint8Array | undefined;
                value?: string | undefined;
                sequenceNo?: number | undefined;
                slpBurn?: {
                    token?: {
                        amount?: string | undefined;
                        isMintBaton?: boolean | undefined;
                    } | undefined;
                    tokenId?: Uint8Array | undefined;
                } | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
            }[] | undefined;
            outputs?: {
                value?: string | undefined;
                outputScript?: Uint8Array | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
                spentBy?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
            }[] | undefined;
            lockTime?: number | undefined;
            slpTxData?: {
                slpMeta?: {
                    tokenType?: SlpTokenType | undefined;
                    txType?: SlpTxType | undefined;
                    tokenId?: Uint8Array | undefined;
                    groupTokenId?: Uint8Array | undefined;
                } | undefined;
                genesisInfo?: {
                    tokenTicker?: Uint8Array | undefined;
                    tokenName?: Uint8Array | undefined;
                    tokenDocumentUrl?: Uint8Array | undefined;
                    tokenDocumentHash?: Uint8Array | undefined;
                    decimals?: number | undefined;
                } | undefined;
            } | undefined;
            slpErrorMsg?: string | undefined;
            block?: {
                height?: number | undefined;
                hash?: Uint8Array | undefined;
                timestamp?: string | undefined;
            } | undefined;
            timeFirstSeen?: string | undefined;
            size?: number | undefined;
            isCoinbase?: boolean | undefined;
            network?: Network | undefined;
        }[] | undefined;
        numPages?: number | undefined;
        numTxs?: number | undefined;
    } & {
        txs?: ({
            txid?: Uint8Array | undefined;
            version?: number | undefined;
            inputs?: {
                prevOut?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
                inputScript?: Uint8Array | undefined;
                outputScript?: Uint8Array | undefined;
                value?: string | undefined;
                sequenceNo?: number | undefined;
                slpBurn?: {
                    token?: {
                        amount?: string | undefined;
                        isMintBaton?: boolean | undefined;
                    } | undefined;
                    tokenId?: Uint8Array | undefined;
                } | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
            }[] | undefined;
            outputs?: {
                value?: string | undefined;
                outputScript?: Uint8Array | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
                spentBy?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
            }[] | undefined;
            lockTime?: number | undefined;
            slpTxData?: {
                slpMeta?: {
                    tokenType?: SlpTokenType | undefined;
                    txType?: SlpTxType | undefined;
                    tokenId?: Uint8Array | undefined;
                    groupTokenId?: Uint8Array | undefined;
                } | undefined;
                genesisInfo?: {
                    tokenTicker?: Uint8Array | undefined;
                    tokenName?: Uint8Array | undefined;
                    tokenDocumentUrl?: Uint8Array | undefined;
                    tokenDocumentHash?: Uint8Array | undefined;
                    decimals?: number | undefined;
                } | undefined;
            } | undefined;
            slpErrorMsg?: string | undefined;
            block?: {
                height?: number | undefined;
                hash?: Uint8Array | undefined;
                timestamp?: string | undefined;
            } | undefined;
            timeFirstSeen?: string | undefined;
            size?: number | undefined;
            isCoinbase?: boolean | undefined;
            network?: Network | undefined;
        }[] & ({
            txid?: Uint8Array | undefined;
            version?: number | undefined;
            inputs?: {
                prevOut?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
                inputScript?: Uint8Array | undefined;
                outputScript?: Uint8Array | undefined;
                value?: string | undefined;
                sequenceNo?: number | undefined;
                slpBurn?: {
                    token?: {
                        amount?: string | undefined;
                        isMintBaton?: boolean | undefined;
                    } | undefined;
                    tokenId?: Uint8Array | undefined;
                } | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
            }[] | undefined;
            outputs?: {
                value?: string | undefined;
                outputScript?: Uint8Array | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
                spentBy?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
            }[] | undefined;
            lockTime?: number | undefined;
            slpTxData?: {
                slpMeta?: {
                    tokenType?: SlpTokenType | undefined;
                    txType?: SlpTxType | undefined;
                    tokenId?: Uint8Array | undefined;
                    groupTokenId?: Uint8Array | undefined;
                } | undefined;
                genesisInfo?: {
                    tokenTicker?: Uint8Array | undefined;
                    tokenName?: Uint8Array | undefined;
                    tokenDocumentUrl?: Uint8Array | undefined;
                    tokenDocumentHash?: Uint8Array | undefined;
                    decimals?: number | undefined;
                } | undefined;
            } | undefined;
            slpErrorMsg?: string | undefined;
            block?: {
                height?: number | undefined;
                hash?: Uint8Array | undefined;
                timestamp?: string | undefined;
            } | undefined;
            timeFirstSeen?: string | undefined;
            size?: number | undefined;
            isCoinbase?: boolean | undefined;
            network?: Network | undefined;
        } & {
            txid?: Uint8Array | undefined;
            version?: number | undefined;
            inputs?: ({
                prevOut?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
                inputScript?: Uint8Array | undefined;
                outputScript?: Uint8Array | undefined;
                value?: string | undefined;
                sequenceNo?: number | undefined;
                slpBurn?: {
                    token?: {
                        amount?: string | undefined;
                        isMintBaton?: boolean | undefined;
                    } | undefined;
                    tokenId?: Uint8Array | undefined;
                } | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
            }[] & ({
                prevOut?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
                inputScript?: Uint8Array | undefined;
                outputScript?: Uint8Array | undefined;
                value?: string | undefined;
                sequenceNo?: number | undefined;
                slpBurn?: {
                    token?: {
                        amount?: string | undefined;
                        isMintBaton?: boolean | undefined;
                    } | undefined;
                    tokenId?: Uint8Array | undefined;
                } | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
            } & {
                prevOut?: ({
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } & {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } & Record<Exclude<keyof I["txs"][number]["inputs"][number]["prevOut"], keyof OutPoint>, never>) | undefined;
                inputScript?: Uint8Array | undefined;
                outputScript?: Uint8Array | undefined;
                value?: string | undefined;
                sequenceNo?: number | undefined;
                slpBurn?: ({
                    token?: {
                        amount?: string | undefined;
                        isMintBaton?: boolean | undefined;
                    } | undefined;
                    tokenId?: Uint8Array | undefined;
                } & {
                    token?: ({
                        amount?: string | undefined;
                        isMintBaton?: boolean | undefined;
                    } & {
                        amount?: string | undefined;
                        isMintBaton?: boolean | undefined;
                    } & Record<Exclude<keyof I["txs"][number]["inputs"][number]["slpBurn"]["token"], keyof SlpToken>, never>) | undefined;
                    tokenId?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["txs"][number]["inputs"][number]["slpBurn"], keyof SlpBurn>, never>) | undefined;
                slpToken?: ({
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } & {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } & Record<Exclude<keyof I["txs"][number]["inputs"][number]["slpToken"], keyof SlpToken>, never>) | undefined;
            } & Record<Exclude<keyof I["txs"][number]["inputs"][number], keyof TxInput>, never>)[] & Record<Exclude<keyof I["txs"][number]["inputs"], keyof {
                prevOut?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
                inputScript?: Uint8Array | undefined;
                outputScript?: Uint8Array | undefined;
                value?: string | undefined;
                sequenceNo?: number | undefined;
                slpBurn?: {
                    token?: {
                        amount?: string | undefined;
                        isMintBaton?: boolean | undefined;
                    } | undefined;
                    tokenId?: Uint8Array | undefined;
                } | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
            }[]>, never>) | undefined;
            outputs?: ({
                value?: string | undefined;
                outputScript?: Uint8Array | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
                spentBy?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
            }[] & ({
                value?: string | undefined;
                outputScript?: Uint8Array | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
                spentBy?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
            } & {
                value?: string | undefined;
                outputScript?: Uint8Array | undefined;
                slpToken?: ({
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } & {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } & Record<Exclude<keyof I["txs"][number]["outputs"][number]["slpToken"], keyof SlpToken>, never>) | undefined;
                spentBy?: ({
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } & {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } & Record<Exclude<keyof I["txs"][number]["outputs"][number]["spentBy"], keyof OutPoint>, never>) | undefined;
            } & Record<Exclude<keyof I["txs"][number]["outputs"][number], keyof TxOutput>, never>)[] & Record<Exclude<keyof I["txs"][number]["outputs"], keyof {
                value?: string | undefined;
                outputScript?: Uint8Array | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
                spentBy?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
            }[]>, never>) | undefined;
            lockTime?: number | undefined;
            slpTxData?: ({
                slpMeta?: {
                    tokenType?: SlpTokenType | undefined;
                    txType?: SlpTxType | undefined;
                    tokenId?: Uint8Array | undefined;
                    groupTokenId?: Uint8Array | undefined;
                } | undefined;
                genesisInfo?: {
                    tokenTicker?: Uint8Array | undefined;
                    tokenName?: Uint8Array | undefined;
                    tokenDocumentUrl?: Uint8Array | undefined;
                    tokenDocumentHash?: Uint8Array | undefined;
                    decimals?: number | undefined;
                } | undefined;
            } & {
                slpMeta?: ({
                    tokenType?: SlpTokenType | undefined;
                    txType?: SlpTxType | undefined;
                    tokenId?: Uint8Array | undefined;
                    groupTokenId?: Uint8Array | undefined;
                } & {
                    tokenType?: SlpTokenType | undefined;
                    txType?: SlpTxType | undefined;
                    tokenId?: Uint8Array | undefined;
                    groupTokenId?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["txs"][number]["slpTxData"]["slpMeta"], keyof SlpMeta>, never>) | undefined;
                genesisInfo?: ({
                    tokenTicker?: Uint8Array | undefined;
                    tokenName?: Uint8Array | undefined;
                    tokenDocumentUrl?: Uint8Array | undefined;
                    tokenDocumentHash?: Uint8Array | undefined;
                    decimals?: number | undefined;
                } & {
                    tokenTicker?: Uint8Array | undefined;
                    tokenName?: Uint8Array | undefined;
                    tokenDocumentUrl?: Uint8Array | undefined;
                    tokenDocumentHash?: Uint8Array | undefined;
                    decimals?: number | undefined;
                } & Record<Exclude<keyof I["txs"][number]["slpTxData"]["genesisInfo"], keyof SlpGenesisInfo>, never>) | undefined;
            } & Record<Exclude<keyof I["txs"][number]["slpTxData"], keyof SlpTxData>, never>) | undefined;
            slpErrorMsg?: string | undefined;
            block?: ({
                height?: number | undefined;
                hash?: Uint8Array | undefined;
                timestamp?: string | undefined;
            } & {
                height?: number | undefined;
                hash?: Uint8Array | undefined;
                timestamp?: string | undefined;
            } & Record<Exclude<keyof I["txs"][number]["block"], keyof BlockMetadata>, never>) | undefined;
            timeFirstSeen?: string | undefined;
            size?: number | undefined;
            isCoinbase?: boolean | undefined;
            network?: Network | undefined;
        } & Record<Exclude<keyof I["txs"][number], keyof Tx>, never>)[] & Record<Exclude<keyof I["txs"], keyof {
            txid?: Uint8Array | undefined;
            version?: number | undefined;
            inputs?: {
                prevOut?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
                inputScript?: Uint8Array | undefined;
                outputScript?: Uint8Array | undefined;
                value?: string | undefined;
                sequenceNo?: number | undefined;
                slpBurn?: {
                    token?: {
                        amount?: string | undefined;
                        isMintBaton?: boolean | undefined;
                    } | undefined;
                    tokenId?: Uint8Array | undefined;
                } | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
            }[] | undefined;
            outputs?: {
                value?: string | undefined;
                outputScript?: Uint8Array | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
                spentBy?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
            }[] | undefined;
            lockTime?: number | undefined;
            slpTxData?: {
                slpMeta?: {
                    tokenType?: SlpTokenType | undefined;
                    txType?: SlpTxType | undefined;
                    tokenId?: Uint8Array | undefined;
                    groupTokenId?: Uint8Array | undefined;
                } | undefined;
                genesisInfo?: {
                    tokenTicker?: Uint8Array | undefined;
                    tokenName?: Uint8Array | undefined;
                    tokenDocumentUrl?: Uint8Array | undefined;
                    tokenDocumentHash?: Uint8Array | undefined;
                    decimals?: number | undefined;
                } | undefined;
            } | undefined;
            slpErrorMsg?: string | undefined;
            block?: {
                height?: number | undefined;
                hash?: Uint8Array | undefined;
                timestamp?: string | undefined;
            } | undefined;
            timeFirstSeen?: string | undefined;
            size?: number | undefined;
            isCoinbase?: boolean | undefined;
            network?: Network | undefined;
        }[]>, never>) | undefined;
        numPages?: number | undefined;
        numTxs?: number | undefined;
    } & Record<Exclude<keyof I, keyof TxHistoryPage>, never>>(object: I): TxHistoryPage;
};
export declare const Utxos: {
    encode(message: Utxos, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Utxos;
    fromJSON(object: any): Utxos;
    toJSON(message: Utxos): unknown;
    fromPartial<I extends {
        scriptUtxos?: {
            outputScript?: Uint8Array | undefined;
            utxos?: {
                outpoint?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
                blockHeight?: number | undefined;
                isCoinbase?: boolean | undefined;
                value?: string | undefined;
                slpMeta?: {
                    tokenType?: SlpTokenType | undefined;
                    txType?: SlpTxType | undefined;
                    tokenId?: Uint8Array | undefined;
                    groupTokenId?: Uint8Array | undefined;
                } | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
                network?: Network | undefined;
                isFinal?: boolean | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        scriptUtxos?: ({
            outputScript?: Uint8Array | undefined;
            utxos?: {
                outpoint?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
                blockHeight?: number | undefined;
                isCoinbase?: boolean | undefined;
                value?: string | undefined;
                slpMeta?: {
                    tokenType?: SlpTokenType | undefined;
                    txType?: SlpTxType | undefined;
                    tokenId?: Uint8Array | undefined;
                    groupTokenId?: Uint8Array | undefined;
                } | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
                network?: Network | undefined;
                isFinal?: boolean | undefined;
            }[] | undefined;
        }[] & ({
            outputScript?: Uint8Array | undefined;
            utxos?: {
                outpoint?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
                blockHeight?: number | undefined;
                isCoinbase?: boolean | undefined;
                value?: string | undefined;
                slpMeta?: {
                    tokenType?: SlpTokenType | undefined;
                    txType?: SlpTxType | undefined;
                    tokenId?: Uint8Array | undefined;
                    groupTokenId?: Uint8Array | undefined;
                } | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
                network?: Network | undefined;
                isFinal?: boolean | undefined;
            }[] | undefined;
        } & {
            outputScript?: Uint8Array | undefined;
            utxos?: ({
                outpoint?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
                blockHeight?: number | undefined;
                isCoinbase?: boolean | undefined;
                value?: string | undefined;
                slpMeta?: {
                    tokenType?: SlpTokenType | undefined;
                    txType?: SlpTxType | undefined;
                    tokenId?: Uint8Array | undefined;
                    groupTokenId?: Uint8Array | undefined;
                } | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
                network?: Network | undefined;
                isFinal?: boolean | undefined;
            }[] & ({
                outpoint?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
                blockHeight?: number | undefined;
                isCoinbase?: boolean | undefined;
                value?: string | undefined;
                slpMeta?: {
                    tokenType?: SlpTokenType | undefined;
                    txType?: SlpTxType | undefined;
                    tokenId?: Uint8Array | undefined;
                    groupTokenId?: Uint8Array | undefined;
                } | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
                network?: Network | undefined;
                isFinal?: boolean | undefined;
            } & {
                outpoint?: ({
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } & {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } & Record<Exclude<keyof I["scriptUtxos"][number]["utxos"][number]["outpoint"], keyof OutPoint>, never>) | undefined;
                blockHeight?: number | undefined;
                isCoinbase?: boolean | undefined;
                value?: string | undefined;
                slpMeta?: ({
                    tokenType?: SlpTokenType | undefined;
                    txType?: SlpTxType | undefined;
                    tokenId?: Uint8Array | undefined;
                    groupTokenId?: Uint8Array | undefined;
                } & {
                    tokenType?: SlpTokenType | undefined;
                    txType?: SlpTxType | undefined;
                    tokenId?: Uint8Array | undefined;
                    groupTokenId?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["scriptUtxos"][number]["utxos"][number]["slpMeta"], keyof SlpMeta>, never>) | undefined;
                slpToken?: ({
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } & {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } & Record<Exclude<keyof I["scriptUtxos"][number]["utxos"][number]["slpToken"], keyof SlpToken>, never>) | undefined;
                network?: Network | undefined;
                isFinal?: boolean | undefined;
            } & Record<Exclude<keyof I["scriptUtxos"][number]["utxos"][number], keyof Utxo>, never>)[] & Record<Exclude<keyof I["scriptUtxos"][number]["utxos"], keyof {
                outpoint?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
                blockHeight?: number | undefined;
                isCoinbase?: boolean | undefined;
                value?: string | undefined;
                slpMeta?: {
                    tokenType?: SlpTokenType | undefined;
                    txType?: SlpTxType | undefined;
                    tokenId?: Uint8Array | undefined;
                    groupTokenId?: Uint8Array | undefined;
                } | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
                network?: Network | undefined;
                isFinal?: boolean | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["scriptUtxos"][number], keyof ScriptUtxos>, never>)[] & Record<Exclude<keyof I["scriptUtxos"], keyof {
            outputScript?: Uint8Array | undefined;
            utxos?: {
                outpoint?: {
                    txid?: Uint8Array | undefined;
                    outIdx?: number | undefined;
                } | undefined;
                blockHeight?: number | undefined;
                isCoinbase?: boolean | undefined;
                value?: string | undefined;
                slpMeta?: {
                    tokenType?: SlpTokenType | undefined;
                    txType?: SlpTxType | undefined;
                    tokenId?: Uint8Array | undefined;
                    groupTokenId?: Uint8Array | undefined;
                } | undefined;
                slpToken?: {
                    amount?: string | undefined;
                    isMintBaton?: boolean | undefined;
                } | undefined;
                network?: Network | undefined;
                isFinal?: boolean | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "scriptUtxos">, never>>(object: I): Utxos;
};
export declare const Blocks: {
    encode(message: Blocks, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Blocks;
    fromJSON(object: any): Blocks;
    toJSON(message: Blocks): unknown;
    fromPartial<I extends {
        blocks?: {
            hash?: Uint8Array | undefined;
            prevHash?: Uint8Array | undefined;
            height?: number | undefined;
            nBits?: number | undefined;
            timestamp?: string | undefined;
            blockSize?: string | undefined;
            numTxs?: string | undefined;
            numInputs?: string | undefined;
            numOutputs?: string | undefined;
            sumInputSats?: string | undefined;
            sumCoinbaseOutputSats?: string | undefined;
            sumNormalOutputSats?: string | undefined;
            sumBurnedSats?: string | undefined;
        }[] | undefined;
    } & {
        blocks?: ({
            hash?: Uint8Array | undefined;
            prevHash?: Uint8Array | undefined;
            height?: number | undefined;
            nBits?: number | undefined;
            timestamp?: string | undefined;
            blockSize?: string | undefined;
            numTxs?: string | undefined;
            numInputs?: string | undefined;
            numOutputs?: string | undefined;
            sumInputSats?: string | undefined;
            sumCoinbaseOutputSats?: string | undefined;
            sumNormalOutputSats?: string | undefined;
            sumBurnedSats?: string | undefined;
        }[] & ({
            hash?: Uint8Array | undefined;
            prevHash?: Uint8Array | undefined;
            height?: number | undefined;
            nBits?: number | undefined;
            timestamp?: string | undefined;
            blockSize?: string | undefined;
            numTxs?: string | undefined;
            numInputs?: string | undefined;
            numOutputs?: string | undefined;
            sumInputSats?: string | undefined;
            sumCoinbaseOutputSats?: string | undefined;
            sumNormalOutputSats?: string | undefined;
            sumBurnedSats?: string | undefined;
        } & {
            hash?: Uint8Array | undefined;
            prevHash?: Uint8Array | undefined;
            height?: number | undefined;
            nBits?: number | undefined;
            timestamp?: string | undefined;
            blockSize?: string | undefined;
            numTxs?: string | undefined;
            numInputs?: string | undefined;
            numOutputs?: string | undefined;
            sumInputSats?: string | undefined;
            sumCoinbaseOutputSats?: string | undefined;
            sumNormalOutputSats?: string | undefined;
            sumBurnedSats?: string | undefined;
        } & Record<Exclude<keyof I["blocks"][number], keyof BlockInfo>, never>)[] & Record<Exclude<keyof I["blocks"], keyof {
            hash?: Uint8Array | undefined;
            prevHash?: Uint8Array | undefined;
            height?: number | undefined;
            nBits?: number | undefined;
            timestamp?: string | undefined;
            blockSize?: string | undefined;
            numTxs?: string | undefined;
            numInputs?: string | undefined;
            numOutputs?: string | undefined;
            sumInputSats?: string | undefined;
            sumCoinbaseOutputSats?: string | undefined;
            sumNormalOutputSats?: string | undefined;
            sumBurnedSats?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "blocks">, never>>(object: I): Blocks;
};
export declare const SlpTxData: {
    encode(message: SlpTxData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SlpTxData;
    fromJSON(object: any): SlpTxData;
    toJSON(message: SlpTxData): unknown;
    fromPartial<I extends {
        slpMeta?: {
            tokenType?: SlpTokenType | undefined;
            txType?: SlpTxType | undefined;
            tokenId?: Uint8Array | undefined;
            groupTokenId?: Uint8Array | undefined;
        } | undefined;
        genesisInfo?: {
            tokenTicker?: Uint8Array | undefined;
            tokenName?: Uint8Array | undefined;
            tokenDocumentUrl?: Uint8Array | undefined;
            tokenDocumentHash?: Uint8Array | undefined;
            decimals?: number | undefined;
        } | undefined;
    } & {
        slpMeta?: ({
            tokenType?: SlpTokenType | undefined;
            txType?: SlpTxType | undefined;
            tokenId?: Uint8Array | undefined;
            groupTokenId?: Uint8Array | undefined;
        } & {
            tokenType?: SlpTokenType | undefined;
            txType?: SlpTxType | undefined;
            tokenId?: Uint8Array | undefined;
            groupTokenId?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["slpMeta"], keyof SlpMeta>, never>) | undefined;
        genesisInfo?: ({
            tokenTicker?: Uint8Array | undefined;
            tokenName?: Uint8Array | undefined;
            tokenDocumentUrl?: Uint8Array | undefined;
            tokenDocumentHash?: Uint8Array | undefined;
            decimals?: number | undefined;
        } & {
            tokenTicker?: Uint8Array | undefined;
            tokenName?: Uint8Array | undefined;
            tokenDocumentUrl?: Uint8Array | undefined;
            tokenDocumentHash?: Uint8Array | undefined;
            decimals?: number | undefined;
        } & Record<Exclude<keyof I["genesisInfo"], keyof SlpGenesisInfo>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof SlpTxData>, never>>(object: I): SlpTxData;
};
export declare const SlpMeta: {
    encode(message: SlpMeta, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SlpMeta;
    fromJSON(object: any): SlpMeta;
    toJSON(message: SlpMeta): unknown;
    fromPartial<I extends {
        tokenType?: SlpTokenType | undefined;
        txType?: SlpTxType | undefined;
        tokenId?: Uint8Array | undefined;
        groupTokenId?: Uint8Array | undefined;
    } & {
        tokenType?: SlpTokenType | undefined;
        txType?: SlpTxType | undefined;
        tokenId?: Uint8Array | undefined;
        groupTokenId?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof SlpMeta>, never>>(object: I): SlpMeta;
};
export declare const TokenStats: {
    encode(message: TokenStats, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TokenStats;
    fromJSON(object: any): TokenStats;
    toJSON(message: TokenStats): unknown;
    fromPartial<I extends {
        totalMinted?: string | undefined;
        totalBurned?: string | undefined;
    } & {
        totalMinted?: string | undefined;
        totalBurned?: string | undefined;
    } & Record<Exclude<keyof I, keyof TokenStats>, never>>(object: I): TokenStats;
};
export declare const TxInput: {
    encode(message: TxInput, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TxInput;
    fromJSON(object: any): TxInput;
    toJSON(message: TxInput): unknown;
    fromPartial<I extends {
        prevOut?: {
            txid?: Uint8Array | undefined;
            outIdx?: number | undefined;
        } | undefined;
        inputScript?: Uint8Array | undefined;
        outputScript?: Uint8Array | undefined;
        value?: string | undefined;
        sequenceNo?: number | undefined;
        slpBurn?: {
            token?: {
                amount?: string | undefined;
                isMintBaton?: boolean | undefined;
            } | undefined;
            tokenId?: Uint8Array | undefined;
        } | undefined;
        slpToken?: {
            amount?: string | undefined;
            isMintBaton?: boolean | undefined;
        } | undefined;
    } & {
        prevOut?: ({
            txid?: Uint8Array | undefined;
            outIdx?: number | undefined;
        } & {
            txid?: Uint8Array | undefined;
            outIdx?: number | undefined;
        } & Record<Exclude<keyof I["prevOut"], keyof OutPoint>, never>) | undefined;
        inputScript?: Uint8Array | undefined;
        outputScript?: Uint8Array | undefined;
        value?: string | undefined;
        sequenceNo?: number | undefined;
        slpBurn?: ({
            token?: {
                amount?: string | undefined;
                isMintBaton?: boolean | undefined;
            } | undefined;
            tokenId?: Uint8Array | undefined;
        } & {
            token?: ({
                amount?: string | undefined;
                isMintBaton?: boolean | undefined;
            } & {
                amount?: string | undefined;
                isMintBaton?: boolean | undefined;
            } & Record<Exclude<keyof I["slpBurn"]["token"], keyof SlpToken>, never>) | undefined;
            tokenId?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["slpBurn"], keyof SlpBurn>, never>) | undefined;
        slpToken?: ({
            amount?: string | undefined;
            isMintBaton?: boolean | undefined;
        } & {
            amount?: string | undefined;
            isMintBaton?: boolean | undefined;
        } & Record<Exclude<keyof I["slpToken"], keyof SlpToken>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof TxInput>, never>>(object: I): TxInput;
};
export declare const TxOutput: {
    encode(message: TxOutput, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TxOutput;
    fromJSON(object: any): TxOutput;
    toJSON(message: TxOutput): unknown;
    fromPartial<I extends {
        value?: string | undefined;
        outputScript?: Uint8Array | undefined;
        slpToken?: {
            amount?: string | undefined;
            isMintBaton?: boolean | undefined;
        } | undefined;
        spentBy?: {
            txid?: Uint8Array | undefined;
            outIdx?: number | undefined;
        } | undefined;
    } & {
        value?: string | undefined;
        outputScript?: Uint8Array | undefined;
        slpToken?: ({
            amount?: string | undefined;
            isMintBaton?: boolean | undefined;
        } & {
            amount?: string | undefined;
            isMintBaton?: boolean | undefined;
        } & Record<Exclude<keyof I["slpToken"], keyof SlpToken>, never>) | undefined;
        spentBy?: ({
            txid?: Uint8Array | undefined;
            outIdx?: number | undefined;
        } & {
            txid?: Uint8Array | undefined;
            outIdx?: number | undefined;
        } & Record<Exclude<keyof I["spentBy"], keyof OutPoint>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof TxOutput>, never>>(object: I): TxOutput;
};
export declare const BlockMetadata: {
    encode(message: BlockMetadata, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockMetadata;
    fromJSON(object: any): BlockMetadata;
    toJSON(message: BlockMetadata): unknown;
    fromPartial<I extends {
        height?: number | undefined;
        hash?: Uint8Array | undefined;
        timestamp?: string | undefined;
    } & {
        height?: number | undefined;
        hash?: Uint8Array | undefined;
        timestamp?: string | undefined;
    } & Record<Exclude<keyof I, keyof BlockMetadata>, never>>(object: I): BlockMetadata;
};
export declare const OutPoint: {
    encode(message: OutPoint, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): OutPoint;
    fromJSON(object: any): OutPoint;
    toJSON(message: OutPoint): unknown;
    fromPartial<I extends {
        txid?: Uint8Array | undefined;
        outIdx?: number | undefined;
    } & {
        txid?: Uint8Array | undefined;
        outIdx?: number | undefined;
    } & Record<Exclude<keyof I, keyof OutPoint>, never>>(object: I): OutPoint;
};
export declare const SlpToken: {
    encode(message: SlpToken, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SlpToken;
    fromJSON(object: any): SlpToken;
    toJSON(message: SlpToken): unknown;
    fromPartial<I extends {
        amount?: string | undefined;
        isMintBaton?: boolean | undefined;
    } & {
        amount?: string | undefined;
        isMintBaton?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof SlpToken>, never>>(object: I): SlpToken;
};
export declare const SlpBurn: {
    encode(message: SlpBurn, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SlpBurn;
    fromJSON(object: any): SlpBurn;
    toJSON(message: SlpBurn): unknown;
    fromPartial<I extends {
        token?: {
            amount?: string | undefined;
            isMintBaton?: boolean | undefined;
        } | undefined;
        tokenId?: Uint8Array | undefined;
    } & {
        token?: ({
            amount?: string | undefined;
            isMintBaton?: boolean | undefined;
        } & {
            amount?: string | undefined;
            isMintBaton?: boolean | undefined;
        } & Record<Exclude<keyof I["token"], keyof SlpToken>, never>) | undefined;
        tokenId?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof SlpBurn>, never>>(object: I): SlpBurn;
};
export declare const SlpGenesisInfo: {
    encode(message: SlpGenesisInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SlpGenesisInfo;
    fromJSON(object: any): SlpGenesisInfo;
    toJSON(message: SlpGenesisInfo): unknown;
    fromPartial<I extends {
        tokenTicker?: Uint8Array | undefined;
        tokenName?: Uint8Array | undefined;
        tokenDocumentUrl?: Uint8Array | undefined;
        tokenDocumentHash?: Uint8Array | undefined;
        decimals?: number | undefined;
    } & {
        tokenTicker?: Uint8Array | undefined;
        tokenName?: Uint8Array | undefined;
        tokenDocumentUrl?: Uint8Array | undefined;
        tokenDocumentHash?: Uint8Array | undefined;
        decimals?: number | undefined;
    } & Record<Exclude<keyof I, keyof SlpGenesisInfo>, never>>(object: I): SlpGenesisInfo;
};
export declare const UtxoState: {
    encode(message: UtxoState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UtxoState;
    fromJSON(object: any): UtxoState;
    toJSON(message: UtxoState): unknown;
    fromPartial<I extends {
        height?: number | undefined;
        isConfirmed?: boolean | undefined;
        state?: UtxoStateVariant | undefined;
    } & {
        height?: number | undefined;
        isConfirmed?: boolean | undefined;
        state?: UtxoStateVariant | undefined;
    } & Record<Exclude<keyof I, keyof UtxoState>, never>>(object: I): UtxoState;
};
export declare const Subscription: {
    encode(message: Subscription, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Subscription;
    fromJSON(object: any): Subscription;
    toJSON(message: Subscription): unknown;
    fromPartial<I extends {
        scriptType?: string | undefined;
        payload?: Uint8Array | undefined;
        isSubscribe?: boolean | undefined;
    } & {
        scriptType?: string | undefined;
        payload?: Uint8Array | undefined;
        isSubscribe?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof Subscription>, never>>(object: I): Subscription;
};
export declare const SubscriptionNode: {
    encode(message: SubscriptionNode, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubscriptionNode;
    fromJSON(object: any): SubscriptionNode;
    toJSON(message: SubscriptionNode): unknown;
    fromPartial<I extends {
        isUnsubscribe?: boolean | undefined;
        subscriptionObject?: {
            scriptType?: string | undefined;
            payload?: Uint8Array | undefined;
        } | undefined;
    } & {
        isUnsubscribe?: boolean | undefined;
        subscriptionObject?: ({
            scriptType?: string | undefined;
            payload?: Uint8Array | undefined;
        } & {
            scriptType?: string | undefined;
            payload?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["subscriptionObject"], keyof SubscriptionObject>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof SubscriptionNode>, never>>(object: I): SubscriptionNode;
};
export declare const SubscribeMsg: {
    encode(message: SubscribeMsg, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubscribeMsg;
    fromJSON(object: any): SubscribeMsg;
    toJSON(message: SubscribeMsg): unknown;
    fromPartial<I extends {
        error?: {
            errorCode?: string | undefined;
            msg?: string | undefined;
            isUserError?: boolean | undefined;
        } | undefined;
        AddedToMempool?: {
            txid?: Uint8Array | undefined;
        } | undefined;
        RemovedFromMempool?: {
            txid?: Uint8Array | undefined;
        } | undefined;
        Confirmed?: {
            txid?: Uint8Array | undefined;
        } | undefined;
        Reorg?: {
            txid?: Uint8Array | undefined;
        } | undefined;
        BlockConnected?: {
            blockHash?: Uint8Array | undefined;
        } | undefined;
        BlockDisconnected?: {
            blockHash?: Uint8Array | undefined;
        } | undefined;
    } & {
        error?: ({
            errorCode?: string | undefined;
            msg?: string | undefined;
            isUserError?: boolean | undefined;
        } & {
            errorCode?: string | undefined;
            msg?: string | undefined;
            isUserError?: boolean | undefined;
        } & Record<Exclude<keyof I["error"], keyof Error>, never>) | undefined;
        AddedToMempool?: ({
            txid?: Uint8Array | undefined;
        } & {
            txid?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["AddedToMempool"], "txid">, never>) | undefined;
        RemovedFromMempool?: ({
            txid?: Uint8Array | undefined;
        } & {
            txid?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["RemovedFromMempool"], "txid">, never>) | undefined;
        Confirmed?: ({
            txid?: Uint8Array | undefined;
        } & {
            txid?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["Confirmed"], "txid">, never>) | undefined;
        Reorg?: ({
            txid?: Uint8Array | undefined;
        } & {
            txid?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["Reorg"], "txid">, never>) | undefined;
        BlockConnected?: ({
            blockHash?: Uint8Array | undefined;
        } & {
            blockHash?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["BlockConnected"], "blockHash">, never>) | undefined;
        BlockDisconnected?: ({
            blockHash?: Uint8Array | undefined;
        } & {
            blockHash?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["BlockDisconnected"], "blockHash">, never>) | undefined;
    } & Record<Exclude<keyof I, keyof SubscribeMsg>, never>>(object: I): SubscribeMsg;
};
export declare const MsgAddedToMempool: {
    encode(message: MsgAddedToMempool, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgAddedToMempool;
    fromJSON(object: any): MsgAddedToMempool;
    toJSON(message: MsgAddedToMempool): unknown;
    fromPartial<I extends {
        txid?: Uint8Array | undefined;
    } & {
        txid?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, "txid">, never>>(object: I): MsgAddedToMempool;
};
export declare const MsgRemovedFromMempool: {
    encode(message: MsgRemovedFromMempool, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgRemovedFromMempool;
    fromJSON(object: any): MsgRemovedFromMempool;
    toJSON(message: MsgRemovedFromMempool): unknown;
    fromPartial<I extends {
        txid?: Uint8Array | undefined;
    } & {
        txid?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, "txid">, never>>(object: I): MsgRemovedFromMempool;
};
export declare const MsgConfirmed: {
    encode(message: MsgConfirmed, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgConfirmed;
    fromJSON(object: any): MsgConfirmed;
    toJSON(message: MsgConfirmed): unknown;
    fromPartial<I extends {
        txid?: Uint8Array | undefined;
    } & {
        txid?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, "txid">, never>>(object: I): MsgConfirmed;
};
export declare const MsgReorg: {
    encode(message: MsgReorg, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgReorg;
    fromJSON(object: any): MsgReorg;
    toJSON(message: MsgReorg): unknown;
    fromPartial<I extends {
        txid?: Uint8Array | undefined;
    } & {
        txid?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, "txid">, never>>(object: I): MsgReorg;
};
export declare const MsgBlockConnected: {
    encode(message: MsgBlockConnected, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgBlockConnected;
    fromJSON(object: any): MsgBlockConnected;
    toJSON(message: MsgBlockConnected): unknown;
    fromPartial<I extends {
        blockHash?: Uint8Array | undefined;
    } & {
        blockHash?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, "blockHash">, never>>(object: I): MsgBlockConnected;
};
export declare const MsgBlockDisconnected: {
    encode(message: MsgBlockDisconnected, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgBlockDisconnected;
    fromJSON(object: any): MsgBlockDisconnected;
    toJSON(message: MsgBlockDisconnected): unknown;
    fromPartial<I extends {
        blockHash?: Uint8Array | undefined;
    } & {
        blockHash?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, "blockHash">, never>>(object: I): MsgBlockDisconnected;
};
export declare const Error: {
    encode(message: Error, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Error;
    fromJSON(object: any): Error;
    toJSON(message: Error): unknown;
    fromPartial<I extends {
        errorCode?: string | undefined;
        msg?: string | undefined;
        isUserError?: boolean | undefined;
    } & {
        errorCode?: string | undefined;
        msg?: string | undefined;
        isUserError?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof Error>, never>>(object: I): Error;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
//# sourceMappingURL=chronik.d.ts.map